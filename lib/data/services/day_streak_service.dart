import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:tms_app/core/utils/constants.dart';
import 'package:tms_app/data/models/streak/day_streak_model.dart';

/// Service ƒë·ªÉ g·ªçi API li√™n quan ƒë·∫øn Day Streak (chu·ªói ng√†y h·ªçc li√™n t·ª•c)
class DayStreakService {
  final String baseUrl = "${Constants.BASE_URL}/api";
  final Dio dio;

  /// Constructor v·ªõi dependency injection cho Dio
  DayStreakService({required this.dio});

  /// L·∫•y th√¥ng tin chu·ªói ng√†y h·ªçc c·ªßa ng∆∞·ªùi d√πng
  ///
  /// [userId]: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin
  /// [token]: JWT token ƒë·ªÉ x√°c th·ª±c
  ///
  /// Tr·∫£ v·ªÅ [DayStreakData] ch·ª©a th√¥ng tin chu·ªói ng√†y h·ªçc
  Future<DayStreakData> getUserDayStreak({
    required int userId,
    required String token,
  }) async {
    try {
      // C·∫•u h√¨nh headers API request
      _configureHeaders(token);

      // G·ªçi API
      final response = await dio.get('$baseUrl/activity/streak/$userId');

      // Ki·ªÉm tra response
      if (response.statusCode == 200) {
        final data = response.data;

        if (data != null && data['data'] != null) {
          // Parse d·ªØ li·ªáu v√† t√≠nh to√°n streak
          return _processStreakData(data['data'], userId);
        } else {
          throw Exception('D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá');
        }
      } else {
        throw Exception(
            'L·ªói khi l·∫•y d·ªØ li·ªáu chu·ªói ng√†y h·ªçc: ${response.statusCode}');
      }
    } catch (e) {
      debugPrint('‚ùå L·ªói khi g·ªçi API day streak: $e');

      // N·∫øu l·ªói k·∫øt n·ªëi, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
      if (_isConnectionError(e)) {
        return _getMockDayStreakData(userId);
      }

      // N·∫øu kh√¥ng ph·∫£i l·ªói k·∫øt n·ªëi, throw l·∫°i exception
      rethrow;
    }
  }

  /// C·∫•u h√¨nh headers cho API request
  void _configureHeaders(String token) {
    dio.options.headers['Authorization'] = 'Bearer $token';
    dio.options.headers['Accept'] = 'application/json';
    dio.options.headers['Content-Type'] = 'application/json';
    dio.options.headers['Cache-Control'] = 'no-cache';
  }

  /// Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói k·∫øt n·ªëi kh√¥ng
  bool _isConnectionError(dynamic error) {
    final errorMsg = error.toString().toLowerCase();
    return errorMsg.contains('socketexception') ||
        errorMsg.contains('connection refused') ||
        errorMsg.contains('connection timed out');
  }

  /// X·ª≠ l√Ω d·ªØ li·ªáu streak t·ª´ API response
  DayStreakData _processStreakData(
      Map<String, dynamic> streakData, int userId) {
    // L·∫•y danh s√°ch c√°c ng√†y ho·∫°t ƒë·ªông
    final activeDates = List<String>.from(streakData['activeDates'] ?? []);
    final totalActiveDays = activeDates.length;

    // L·∫•y currentStreak t·ª´ API
    int apiCurrentStreak = streakData['currentStreak'] ?? 0;
    final int maxStreak = streakData['maxStreak'] ?? 0;

    // N·∫øu API tr·∫£ v·ªÅ currentStreak = 0 nh∆∞ng c√≥ activeDates, t·ª± t√≠nh l·∫°i
    if (apiCurrentStreak == 0 && activeDates.isNotEmpty) {
      int calculatedStreak = _calculateCurrentStreak(activeDates);

      // S·ª≠ d·ª•ng gi√° tr·ªã t√≠nh to√°n n·∫øu h·ª£p l√Ω
      if (calculatedStreak > 0) {
        debugPrint(
            'üìà S·ª≠ d·ª•ng currentStreak ƒë∆∞·ª£c t√≠nh l·∫°i: $calculatedStreak (thay cho API: 0)');
        apiCurrentStreak = calculatedStreak;
      }
    }

    return DayStreakData(
      userId: userId,
      currentStreak: apiCurrentStreak,
      maxStreak: maxStreak,
      totalActiveDays: totalActiveDays,
      activeDates: activeDates,
    );
  }

  /// T√≠nh to√°n chu·ªói ng√†y h·ªçc hi·ªán t·∫°i d·ª±a tr√™n danh s√°ch ng√†y ho·∫°t ƒë·ªông
  int _calculateCurrentStreak(List<String> activeDates) {
    if (activeDates.isEmpty) return 0;

    // S·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ª´ ng√†y g·∫ßn nh·∫•t
    List<String> sortedDates = List.from(activeDates);
    sortedDates.sort((a, b) => b.compareTo(a));

    // L·∫•y ng√†y hi·ªán t·∫°i v√† h√¥m qua theo ƒë·ªãnh d·∫°ng yyyy-MM-dd
    final now = DateTime.now();
    final yesterday = now.subtract(const Duration(days: 1));
    final today = _formatDate(now);
    final yesterdayStr = _formatDate(yesterday);

    // Ng√†y ho·∫°t ƒë·ªông g·∫ßn nh·∫•t
    final latestActiveDate = sortedDates[0];

    // Ki·ªÉm tra xem ng√†y g·∫ßn nh·∫•t c√≥ ph·∫£i l√† h√¥m nay ho·∫∑c h√¥m qua kh√¥ng
    if (latestActiveDate != today && latestActiveDate != yesterdayStr) {
      return 0; // Chu·ªói ƒë√£ b·ªã ƒë·ª©t
    }

    // ƒê·∫øm s·ªë ng√†y li√™n ti·∫øp
    int streak = 1;
    DateTime currentDate = DateTime.parse(latestActiveDate);

    for (int i = 1; i < sortedDates.length; i++) {
      DateTime prevDate = DateTime.parse(sortedDates[i]);

      // T√≠nh s·ªë ng√†y ch√™nh l·ªách
      int dayDiff = currentDate.difference(prevDate).inDays;

      if (dayDiff == 1) {
        // N·∫øu l√† ng√†y li√™n ti·∫øp, tƒÉng streak
        streak++;
        currentDate = prevDate;
      } else if (dayDiff > 1) {
        // N·∫øu c√≥ kho·∫£ng c√°ch, chu·ªói b·ªã ƒë·ª©t
        break;
      }
    }

    return streak;
  }

  /// ƒê·ªãnh d·∫°ng DateTime th√†nh chu·ªói yyyy-MM-dd
  String _formatDate(DateTime date) {
    return "${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}";
  }

  /// T·∫°o d·ªØ li·ªáu m·∫´u cho m√¥i tr∆∞·ªùng ph√°t tri·ªÉn khi kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c API
  DayStreakData _getMockDayStreakData(int userId) {
    debugPrint('üîÑ S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u cho day streak');

    // T·∫°o danh s√°ch ng√†y ho·∫°t ƒë·ªông trong 30 ng√†y g·∫ßn nh·∫•t
    final now = DateTime.now();
    final List<String> activeDates = [];

    // T·∫°o chu·ªói ng√†y hi·ªán t·∫°i (5 ng√†y li√™n ti·∫øp)
    for (int i = 0; i < 5; i++) {
      final date = now.subtract(Duration(days: i));
      activeDates.add(_formatDate(date));
    }

    // Th√™m m·ªôt s·ªë ng√†y ho·∫°t ƒë·ªông ng·∫´u nhi√™n trong qu√° kh·ª©
    for (int i = 6; i < 30; i++) {
      // 70% kh·∫£ nƒÉng l√† ng√†y ho·∫°t ƒë·ªông
      if (i % 3 != 0) {
        final date = now.subtract(Duration(days: i));
        activeDates.add(_formatDate(date));
      }
    }

    return DayStreakData(
      userId: userId,
      currentStreak: 5,
      maxStreak: 12,
      totalActiveDays: activeDates.length,
      activeDates: activeDates,
    );
  }
}
