import 'package:flutter/material.dart';
import 'package:tms_app/core/DI/service_locator.dart';
import 'package:tms_app/core/utils/shared_prefs.dart';
import 'package:tms_app/data/models/my_course/test_submission_model.dart';
import 'package:tms_app/domain/usecases/my_course/test_submission_usecase.dart';

/// Controller x·ª≠ l√Ω vi·ªác g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra
class TestSubmissionController with ChangeNotifier {
  /// UseCase x·ª≠ l√Ω vi·ªác g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra
  final TestSubmissionUseCase _testSubmissionUseCase;

  /// Tr·∫°ng th√°i ƒëang t·∫£i
  bool _isLoading = false;

  /// K·∫øt qu·∫£ b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng
  TestSubmissionResponse? _lessonTestResult;

  /// K·∫øt qu·∫£ b√†i ki·ªÉm tra ch∆∞∆°ng
  ChapterTestSubmissionResponse? _chapterTestResult;

  /// C√≥ l·ªói x·∫£y ra kh√¥ng
  bool _hasError = false;

  /// Th√¥ng b√°o l·ªói
  String _errorMessage = '';

  /// Constructor
  TestSubmissionController({TestSubmissionUseCase? testSubmissionUseCase})
      : _testSubmissionUseCase =
            testSubmissionUseCase ?? sl<TestSubmissionUseCase>();

  /// Getter cho tr·∫°ng th√°i ƒëang t·∫£i
  bool get isLoading => _isLoading;

  /// Getter cho k·∫øt qu·∫£ b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng
  TestSubmissionResponse? get lessonTestResult => _lessonTestResult;

  /// Getter cho k·∫øt qu·∫£ b√†i ki·ªÉm tra ch∆∞∆°ng
  ChapterTestSubmissionResponse? get chapterTestResult => _chapterTestResult;

  /// Getter cho tr·∫°ng th√°i l·ªói
  bool get hasError => _hasError;

  /// Getter cho th√¥ng b√°o l·ªói
  String get errorMessage => _errorMessage;

  /// G·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng
  Future<TestSubmissionResponse?> submitLessonTest({
    required int testId,
    required int totalQuestion,
    required String questionTypes,
    required int durationTest,
    required int courseId,
    required int chapterId,
    required List<QuestionAnswer> answers,
  }) async {
    _isLoading = true;
    _hasError = false;
    _errorMessage = '';
    notifyListeners();

    try {
      // L·∫•y accountId t·ª´ SharedPrefs
      final accountId = await SharedPrefs.getUserId();

      print('üß™ ƒêang g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng...');
      print('   - TestId: $testId');
      print('   - CourseId: $courseId');
      print('   - ChapterId: $chapterId');
      print('   - TotalQuestion: $totalQuestion');
      print('   - AccountId: $accountId');

      // T·∫°o request
      final request = TestSubmissionRequest(
        testId: testId,
        totalQuestion: totalQuestion,
        type: questionTypes,
        durationTest: durationTest,
        courseId: courseId,
        accountId: accountId,
        chapterId: chapterId,
        isChapterTest: false,
        questionResponsiveList: answers,
      );

      // G·ª≠i c√¢u tr·∫£ l·ªùi
      final result = await _testSubmissionUseCase.submitLessonTest(request);
      _lessonTestResult = result;

      print('‚úÖ ƒê√£ g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng th√†nh c√¥ng');
      print('üìä ƒêi·ªÉm s·ªë: ${result.data?.score}');
      print('üìã K·∫øt qu·∫£: ${result.data?.resultTest}');

      _isLoading = false;
      notifyListeners();
      return result;
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra th√¥ng th∆∞·ªùng: $e');
      _hasError = true;
      _errorMessage = e.toString();
      _isLoading = false;
      notifyListeners();
      return null;
    }
  }

  /// G·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra ch∆∞∆°ng
  Future<ChapterTestSubmissionResponse?> submitChapterTest({
    required int testId,
    required int totalQuestion,
    required String questionTypes,
    required int durationTest,
    required int courseId,
    required int chapterId,
    required List<QuestionAnswer> answers,
  }) async {
    _isLoading = true;
    _hasError = false;
    _errorMessage = '';
    notifyListeners();

    try {
      // L·∫•y accountId t·ª´ SharedPrefs
      final accountId = await SharedPrefs.getUserId();

      print('üß™ ƒêang g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra ch∆∞∆°ng...');
      print('   - TestId: $testId');
      print('   - CourseId: $courseId');
      print('   - ChapterId: $chapterId');
      print('   - TotalQuestion: $totalQuestion');
      print('   - AccountId: $accountId');

      // T·∫°o request
      final request = TestSubmissionRequest(
        testId: testId,
        totalQuestion: totalQuestion,
        type: questionTypes,
        durationTest: durationTest,
        courseId: courseId,
        accountId: accountId,
        chapterId: chapterId,
        isChapterTest: true,
        questionResponsiveList: answers,
      );

      // G·ª≠i c√¢u tr·∫£ l·ªùi
      final result = await _testSubmissionUseCase.submitChapterTest(request);
      _chapterTestResult = result;

      print('‚úÖ ƒê√£ g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra ch∆∞∆°ng th√†nh c√¥ng');
      print('üìã K·∫øt qu·∫£: ${result.message}');

      _isLoading = false;
      notifyListeners();
      return result;
    } catch (e) {
      print('‚ùå L·ªói khi g·ª≠i c√¢u tr·∫£ l·ªùi b√†i ki·ªÉm tra ch∆∞∆°ng: $e');
      _hasError = true;
      _errorMessage = e.toString();
      _isLoading = false;
      notifyListeners();
      return null;
    }
  }

  /// Reset tr·∫°ng th√°i l·ªói
  void resetError() {
    _hasError = false;
    _errorMessage = '';
    notifyListeners();
  }

  /// Reset k·∫øt qu·∫£
  void resetResults() {
    _lessonTestResult = null;
    _chapterTestResult = null;
    notifyListeners();
  }
}
