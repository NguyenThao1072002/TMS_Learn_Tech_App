import 'package:flutter/material.dart';
import 'package:tms_app/data/models/course_progress_model.dart';
import 'package:tms_app/data/models/my_course/completed_lession_model.dart';
import 'package:tms_app/domain/usecases/my_course/course_progress_usecase.dart';

/// Controller qu·∫£n l√Ω ti·∫øn tr√¨nh h·ªçc t·∫≠p
class CourseProgressController extends ChangeNotifier {
  final AddCourseProgressUseCase _addCourseProgressUseCase;
  final UnlockNextLessonUseCase _unlockNextLessonUseCase;

  bool _isLoading = false;
  String? _errorMessage;
  CourseProgressModel? _currentProgress;

  /// Constructor
  CourseProgressController({
    required AddCourseProgressUseCase addCourseProgressUseCase,
    required UnlockNextLessonUseCase unlockNextLessonUseCase,
  })  : _addCourseProgressUseCase = addCourseProgressUseCase,
        _unlockNextLessonUseCase = unlockNextLessonUseCase;

  /// Getter cho tr·∫°ng th√°i loading
  bool get isLoading => _isLoading;

  /// Getter cho th√¥ng b√°o l·ªói
  String? get errorMessage => _errorMessage;

  /// Getter cho ti·∫øn tr√¨nh hi·ªán t·∫°i
  CourseProgressModel? get currentProgress => _currentProgress;

  /// Th√™m ti·∫øn tr√¨nh m·ªõi khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu h·ªçc kh√≥a h·ªçc
  Future<CourseProgressModel?> addCourseProgress(
      int accountId, int courseId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      print(
          'üîÑ CourseProgressController: ƒêang th√™m ti·∫øn tr√¨nh m·ªõi cho accountId=$accountId, courseId=$courseId');
      final response =
          await _addCourseProgressUseCase.execute(accountId, courseId);
      _currentProgress = response.data;

      _isLoading = false;
      notifyListeners();

      print('‚úÖ CourseProgressController: Th√™m ti·∫øn tr√¨nh th√†nh c√¥ng');
      return _currentProgress;
    } catch (e) {
      _isLoading = false;
      _errorMessage = 'Kh√¥ng th·ªÉ th√™m ti·∫øn tr√¨nh: $e';
      notifyListeners();

      print('‚ùå CourseProgressController: L·ªói khi th√™m ti·∫øn tr√¨nh: $e');
      return null;
    }
  }

  /// M·ªü kh√≥a b√†i h·ªçc ti·∫øp theo khi ng∆∞·ªùi d√πng ho√†n th√†nh b√†i h·ªçc hi·ªán t·∫°i
  Future<CourseProgressModel?> unlockNextLesson(
      String accountId, int courseId, int chapterId, int lessonId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      print(
          'üîÑ CourseProgressController: ƒêang m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo cho accountId=$accountId, courseId=$courseId, chapterId=$chapterId, lessonId=$lessonId');
      final response = await _unlockNextLessonUseCase.execute(
          accountId, courseId, chapterId, lessonId);
      _currentProgress = response.data.progress;

      _isLoading = false;
      notifyListeners();

      print('‚úÖ CourseProgressController: M·ªü kh√≥a b√†i h·ªçc ti·∫øp theo th√†nh c√¥ng');
      return _currentProgress;
    } catch (e) {
      _isLoading = false;
      _errorMessage = 'Kh√¥ng th·ªÉ m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo: $e';
      notifyListeners();

      print(
          '‚ùå CourseProgressController: L·ªói khi m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo: $e');
      return null;
    }
  }

  /// X√≥a th√¥ng b√°o l·ªói
  void clearError() {
    _errorMessage = null;
    notifyListeners();
  }
}
