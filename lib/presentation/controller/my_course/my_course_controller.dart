import 'dart:convert';

import 'package:flutter/material.dart' hide MaterialType;
import 'package:tms_app/core/DI/service_locator.dart';
import 'package:tms_app/data/models/my_course/learn_lesson_model.dart'
    hide Lesson, LessonType;
import 'package:tms_app/domain/usecases/my_course/course_lesson_usecase.dart';
import 'package:tms_app/presentation/screens/my_account/my_course/enroll_course.dart';
import 'package:tms_app/core/utils/shared_prefs.dart';
import 'package:tms_app/domain/repositories/my_course/course_progress_repository.dart';

class MyCourseController with ChangeNotifier {
  // Dependencies
  final CourseLessonUseCase _courseLessonUseCase;

  // State variables
  bool _isLoading = true;
  List<CourseChapter> _courseData = [];
  CourseLessonResponse? _courseLessonResponse;
  Map<String, bool> _completedLessons = {};
  List<bool> _expandedChapters = [];

  int _selectedChapterIndex = 0;
  int _selectedLessonIndex = 0;
  bool _showSidebarInMobile = false;
  double _testResult = 0.0;
  Function(Lesson)? _onStartTestCallback;

  // Getters
  bool get isLoading => _isLoading;
  List<CourseChapter> get courseData => _courseData;
  Map<String, bool> get completedLessons => _completedLessons;
  List<bool> get expandedChapters => _expandedChapters;
  int get selectedChapterIndex => _selectedChapterIndex;
  int get selectedLessonIndex => _selectedLessonIndex;
  bool get showSidebarInMobile => _showSidebarInMobile;
  double get testResult => _testResult;
  CourseLessonResponse? get courseLessonResponse => _courseLessonResponse;

  // Constructor with dependency injection
  MyCourseController({CourseLessonUseCase? courseLessonUseCase})
      : _courseLessonUseCase = courseLessonUseCase ?? sl<CourseLessonUseCase>();

  // Initialize controller
  Future<void> initialize(int courseId) async {
    await loadCourseData(courseId);
  }

  // Load course data from API
  Future<void> loadCourseData(int courseId) async {
    _isLoading = true;
    notifyListeners();
    print('B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc t·ª´ API v·ªõi ID: $courseId');

    try {
      // L·∫•y accountId t·ª´ SharedPrefs
      final accountId = await SharedPrefs.getUserId();

      final courseLessonResponse = await _courseLessonUseCase
          .getCourseLessons(courseId, accountId: accountId);
      _courseLessonResponse = courseLessonResponse;
      print('ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ API th√†nh c√¥ng');

      // Convert API data to local format
      _courseData = _convertApiDataToLocalFormat(courseLessonResponse);
      print('ƒê√£ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu API: ${_courseData.length} ch∆∞∆°ng');

      // Initialize expanded chapters state
      _expandedChapters =
          List.generate(_courseData.length, (index) => index == 0);

      // Find and select the next incomplete lesson
      _selectNextIncompleteLesson();

      // Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh sau khi t·∫£i d·ªØ li·ªáu
      if (_courseData.isNotEmpty &&
          _selectedChapterIndex >= 0 &&
          _selectedLessonIndex >= 0) {
        final currentLesson =
            _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex];
        print(
            'üîç Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc hi·ªán t·∫°i sau khi t·∫£i d·ªØ li·ªáu:');
        print('   - ID: ${currentLesson.id}');
        print('   - Ti√™u ƒë·ªÅ: ${currentLesson.title}');
        print(
            '   - ƒê√£ ho√†n th√†nh: ${_completedLessons[currentLesson.id] == true}');
      }
    } catch (e) {
      print('L·ªói t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc: $e');
      // Initialize with empty data to avoid null errors
      _courseData = [];
      _expandedChapters = [];
      _selectedChapterIndex = -1;
      _selectedLessonIndex = -1;
    } finally {
      _isLoading = false;
      print('ƒê√£ ho√†n th√†nh qu√° tr√¨nh t·∫£i d·ªØ li·ªáu, isLoading = $_isLoading');
      notifyListeners();
    }
  }

  // T√¨m v√† ch·ªçn b√†i h·ªçc ch∆∞a ho√†n th√†nh ti·∫øp theo
  void _selectNextIncompleteLesson() {
    print('üîç T√¨m b√†i h·ªçc ch∆∞a ho√†n th√†nh ti·∫øp theo...');

    if (_courseData.isEmpty) {
      print('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu kh√≥a h·ªçc');
      return;
    }

    // Duy·ªát qua t·ª´ng ch∆∞∆°ng
    for (int chapterIndex = 0;
        chapterIndex < _courseData.length;
        chapterIndex++) {
      final chapter = _courseData[chapterIndex];

      // Duy·ªát qua t·ª´ng b√†i h·ªçc trong ch∆∞∆°ng
      for (int lessonIndex = 0;
          lessonIndex < chapter.lessons.length;
          lessonIndex++) {
        final lesson = chapter.lessons[lessonIndex];

        // Ki·ªÉm tra n·∫øu b√†i h·ªçc ch∆∞a ho√†n th√†nh
        if (_completedLessons[lesson.id] != true) {
          print('‚úÖ T√¨m th·∫•y b√†i h·ªçc ch∆∞a ho√†n th√†nh:');
          print('   - Ch∆∞∆°ng: ${chapter.title}');
          print('   - B√†i h·ªçc: ${lesson.title}');
          print('   - ID: ${lesson.id}');

          // ƒê·∫∑t ch·ªâ s·ªë ch∆∞∆°ng v√† b√†i h·ªçc hi·ªán t·∫°i
          _selectedChapterIndex = chapterIndex;
          _selectedLessonIndex = lessonIndex;

          // ƒê·∫£m b·∫£o ch∆∞∆°ng ƒë∆∞·ª£c m·ªü r·ªông
          if (chapterIndex < _expandedChapters.length) {
            _expandedChapters[chapterIndex] = true;
          }

          return;
        }
      }
    }

    // N·∫øu t·∫•t c·∫£ b√†i h·ªçc ƒë√£ ho√†n th√†nh, ch·ªçn b√†i h·ªçc ƒë·∫ßu ti√™n
    print('‚ÑπÔ∏è T·∫•t c·∫£ b√†i h·ªçc ƒë√£ ho√†n th√†nh, ch·ªçn b√†i h·ªçc ƒë·∫ßu ti√™n');
    if (_courseData.isNotEmpty && _courseData[0].lessons.isNotEmpty) {
      _selectedChapterIndex = 0;
      _selectedLessonIndex = 0;
      _expandedChapters[0] = true;
    } else {
      _selectedChapterIndex = -1;
      _selectedLessonIndex = -1;
    }
  }

  // Convert API data to local format
  List<CourseChapter> _convertApiDataToLocalFormat(
      CourseLessonResponse apiData) {
    final List<CourseChapter> chapters = [];

    // Kh·ªüi t·∫°o l·∫°i Map completedLessons - ch·ªâ kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
    if (_completedLessons.isEmpty) {
      _completedLessons = {};
    }

    print('üîÑ B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu API');
    print('   - S·ªë ch∆∞∆°ng: ${apiData.chapters.length}');
    print(
        '   - Tr·∫°ng th√°i _completedLessons tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi: $_completedLessons');

    for (final apiChapter in apiData.chapters) {
      final List<Lesson> lessons = [];

      print('   - ƒêang x·ª≠ l√Ω ch∆∞∆°ng: ${apiChapter.chapterTitle}');
      print('   - S·ªë b√†i h·ªçc trong ch∆∞∆°ng: ${apiChapter.lessons.length}');

      // Convert lessons
      for (final apiLesson in apiChapter.lessons) {
        print('     + ƒêang x·ª≠ l√Ω b√†i h·ªçc: ${apiLesson.lessonTitle}');
        print('     + ID b√†i h·ªçc: ${apiLesson.lessonId}');
        print('     + completedLesson t·ª´ API: ${apiLesson.completedLesson}');

        // Determine lesson type - prioritize video content if available
        final LessonType lessonType = (apiLesson.video != null &&
                apiLesson.video!.videoUrl != null &&
                apiLesson.video!.videoUrl.isNotEmpty)
            ? LessonType.video
            : (apiLesson.lessonTest != null
                ? LessonType.test
                : LessonType.video);

        // Format duration from seconds to minutes:seconds
        final String duration = _formatDuration(apiLesson.lessonDuration);

        // Create Lesson object
        final lesson = Lesson(
          id: apiLesson.lessonId.toString(),
          title: apiLesson.lessonTitle,
          duration: duration,
          type: lessonType,
          isUnlocked: true, // Assume all lessons are unlocked initially
          questionCount: apiLesson.lessonTest != null ? 10 : null,
          videoUrl: apiLesson.video != null ? apiLesson.video!.videoUrl : null,
          documentUrl:
              apiLesson.video != null ? apiLesson.video!.documentUrl : null,
          testType: apiLesson.lessonTest != null
              ? apiLesson.lessonTest!.testType
              : null,
          testId: apiLesson.lessonTest != null
              ? apiLesson.lessonTest!.testId
              : null,
          videoId: apiLesson.video != null ? apiLesson.video!.videoId : null,
        );

        lessons.add(lesson);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh t·ª´ API
        final String lessonId = apiLesson.lessonId.toString();
        if (apiLesson.completedLesson == true) {
          _completedLessons[lessonId] = true;
          print('     ‚úÖ ƒê√°nh d·∫•u b√†i h·ªçc $lessonId ƒë√£ ho√†n th√†nh');
        } else {
          print('     ‚ùå B√†i h·ªçc $lessonId ch∆∞a ho√†n th√†nh');
        }
      }

      // Add chapter test if available
      if (apiChapter.chapterTest != null) {
        final chapterTest = Lesson(
          id: "chapter_test_${apiChapter.chapterId}",
          title: apiChapter.chapterTest!.testTitle,
          duration: "30 ph√∫t",
          type: LessonType.test,
          isUnlocked: true,
          questionCount: 15,
          videoUrl: null,
          documentUrl: null,
          testType: apiChapter.chapterTest!.testType,
          testId: apiChapter.chapterTest!.testId,
        );

        lessons.add(chapterTest);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh b√†i ki·ªÉm tra ch∆∞∆°ng t·ª´ API
        final String chapterTestId = "chapter_test_${apiChapter.chapterId}";
        if (apiChapter.completedTestChapter == true) {
          _completedLessons[chapterTestId] = true;
          print(
              '     ‚úÖ ƒê√°nh d·∫•u b√†i ki·ªÉm tra ch∆∞∆°ng ${apiChapter.chapterId} ƒë√£ ho√†n th√†nh');
        } else {
          print(
              '     ‚ùå B√†i ki·ªÉm tra ch∆∞∆°ng ${apiChapter.chapterId} ch∆∞a ho√†n th√†nh');
        }
      }

      // Create CourseChapter object
      final courseChapter = CourseChapter(
        id: apiChapter.chapterId.toString(),
        title: apiChapter.chapterTitle,
        lessons: lessons,
      );

      chapters.add(courseChapter);
    }

    // In ra to√†n b·ªô danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh ƒë·ªÉ ki·ªÉm tra
    print('üìã Danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh:');
    _completedLessons.forEach((key, value) {
      print('   - B√†i h·ªçc ID: $key, Ho√†n th√†nh: $value');
    });

    return chapters;
  }

  // Format duration from seconds to minutes:seconds
  String _formatDuration(int seconds) {
    final int minutes = seconds ~/ 60;
    final int remainingSeconds = seconds % 60;
    return '$minutes:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  // Get video URL for a specific lesson
  String getVideoUrlForLesson(Lesson? lesson) {
    if (lesson == null || _courseLessonResponse == null) {
      return '';
    }

    // Convert lesson ID to int
    int lessonId;
    try {
      lessonId = int.parse(lesson.id);
    } catch (e) {
      // Handle non-numeric IDs (e.g., "chapter_test_1")
      if (lesson.id.startsWith('chapter_test_')) {
        return '';
      }

      // Try to extract ID from format like "1_1"
      final parts = lesson.id.split('_');
      if (parts.length >= 2) {
        try {
          lessonId = int.parse(parts[1]);
        } catch (e) {
          print('Cannot parse lesson ID: ${lesson.id}');
          return '';
        }
      } else {
        return '';
      }
    }

    // Find lesson in API data
    for (final chapter in _courseLessonResponse!.chapters) {
      for (final apiLesson in chapter.lessons) {
        if (apiLesson.lessonId == lessonId) {
          if (apiLesson.video != null) {
            return apiLesson.video!.videoUrl;
          }
        }
      }
    }

    return '';
  }

  // Get materials for a specific lesson
  List<MaterialItem> getMaterialsForLesson(Lesson? lesson) {
    if (lesson == null || _courseLessonResponse == null) {
      return [];
    }

    List<MaterialItem> materials = [];

    // Convert lesson ID to int
    int lessonId;
    try {
      lessonId = int.parse(lesson.id);
    } catch (e) {
      // Handle non-numeric IDs
      if (lesson.id.startsWith('chapter_test_')) {
        return [];
      }

      final parts = lesson.id.split('_');
      if (parts.length >= 2) {
        try {
          lessonId = int.parse(parts[1]);
        } catch (e) {
          print('Cannot parse lesson ID: ${lesson.id}');
          return [];
        }
      } else {
        return [];
      }
    }

    // Find lesson in API data
    for (final chapter in _courseLessonResponse!.chapters) {
      for (final apiLesson in chapter.lessons) {
        if (apiLesson.lessonId == lessonId) {
          if (apiLesson.video != null && apiLesson.video!.documentUrl != null) {
            // Get document URL
            final String documentUrl = apiLesson.video!.documentUrl!;

            // Determine material type
            MaterialType materialType = _getMaterialTypeFromUrl(documentUrl);

            // Create title and description
            String title = 'T√†i li·ªáu c·ªßa ${apiLesson.lessonTitle}';
            String description = 'T√†i li·ªáu b·ªï sung cho b√†i h·ªçc n√†y';

            if (apiLesson.video!.documentShort != null &&
                apiLesson.video!.documentShort!.isNotEmpty) {
              description = apiLesson.video!.documentShort!;
            }

            // Create MaterialItem
            MaterialItem material = MaterialItem(
              title: title,
              description: description,
              type: materialType,
              url: documentUrl,
            );

            materials.add(material);
          }
        }
      }
    }

    return materials;
  }

  // Determine material type based on URL
  MaterialType _getMaterialTypeFromUrl(String url) {
    final String lowercaseUrl = url.toLowerCase();

    if (lowercaseUrl.endsWith('.pdf')) {
      return MaterialType.pdf;
    } else if (lowercaseUrl.endsWith('.doc') ||
        lowercaseUrl.endsWith('.docx')) {
      return MaterialType.document;
    } else if (lowercaseUrl.endsWith('.ppt') ||
        lowercaseUrl.endsWith('.pptx')) {
      return MaterialType.presentation;
    } else if (lowercaseUrl.endsWith('.xls') ||
        lowercaseUrl.endsWith('.xlsx')) {
      return MaterialType.spreadsheet;
    } else if (lowercaseUrl.endsWith('.jpg') ||
        lowercaseUrl.endsWith('.jpeg') ||
        lowercaseUrl.endsWith('.png') ||
        lowercaseUrl.endsWith('.gif')) {
      return MaterialType.image;
    } else if (lowercaseUrl.endsWith('.zip') || lowercaseUrl.endsWith('.rar')) {
      return MaterialType.code;
    } else {
      return MaterialType.other;
    }
  }

  // NAVIGATION METHODS

  // Set selected lesson indexes
  void selectLesson(int chapterIndex, int lessonIndex) {
    _selectedChapterIndex = chapterIndex;
    _selectedLessonIndex = lessonIndex;
    notifyListeners();
  }

  // Toggle sidebar in mobile view
  void toggleSidebarInMobile() {
    _showSidebarInMobile = !_showSidebarInMobile;
    print('Toggled sidebar visibility to: $_showSidebarInMobile');
    notifyListeners();
  }

  // Set sidebar visibility in mobile view
  void setSidebarVisibility(bool isVisible) {
    _showSidebarInMobile = isVisible;
    print('Setting sidebar visibility to: $_showSidebarInMobile');
    notifyListeners();
  }

  // Toggle expanded state of a chapter
  void toggleChapterExpanded(int chapterIndex) {
    _expandedChapters[chapterIndex] = !_expandedChapters[chapterIndex];
    notifyListeners();
  }

  // Expand all chapters
  void expandAllChapters() {
    _expandedChapters = List.generate(_courseData.length, (index) => true);
    _showSidebarInMobile = true;
    notifyListeners();
  }

  // Check if can navigate to previous lesson
  bool canNavigateToPreviousLesson() {
    if (_selectedChapterIndex == 0 && _selectedLessonIndex == 0) {
      return false;
    }
    return true;
  }

  // Navigate to previous lesson
  void navigateToPreviousLesson() {
    if (canNavigateToPreviousLesson()) {
      if (_selectedLessonIndex > 0) {
        // Go to previous lesson in same chapter
        _selectedLessonIndex--;
      } else if (_selectedChapterIndex > 0) {
        // Go to last lesson of previous chapter
        _selectedChapterIndex--;
        _selectedLessonIndex =
            _courseData[_selectedChapterIndex].lessons.length - 1;

        // Ensure chapter is expanded
        _expandedChapters[_selectedChapterIndex] = true;
      }
      notifyListeners();
    }
  }

  // Navigate to next lesson
  void navigateToNextLesson() {
    print('üöÄ ƒêang th·ª≠ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo...');
    print(
        'üîç TR∆Ø·ªöC KHI CHUY·ªÇN: Ch∆∞∆°ng $_selectedChapterIndex, B√†i h·ªçc $_selectedLessonIndex');

    if (canNavigateToNextLesson()) {
      // L∆∞u th√¥ng tin b√†i h·ªçc hi·ªán t·∫°i ƒë·ªÉ so s√°nh
      final oldChapterIndex = _selectedChapterIndex;
      final oldLessonIndex = _selectedLessonIndex;

      if (_selectedLessonIndex <
          _courseData[_selectedChapterIndex].lessons.length - 1) {
        // Go to next lesson in same chapter
        _selectedLessonIndex++;
        print(
            '‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo trong c√πng ch∆∞∆°ng: $_selectedLessonIndex');
      } else if (_selectedChapterIndex < _courseData.length - 1) {
        // Go to first lesson of next chapter
        _selectedChapterIndex++;
        _selectedLessonIndex = 0;
        print(
            '‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn ch∆∞∆°ng ti·∫øp theo: $_selectedChapterIndex, b√†i h·ªçc: $_selectedLessonIndex');

        // Ensure chapter is expanded
        _expandedChapters[_selectedChapterIndex] = true;
      }

      // Ki·ªÉm tra xem gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch∆∞a
      print(
          'üîç SAU KHI CHUY·ªÇN: Ch∆∞∆°ng $_selectedChapterIndex, B√†i h·ªçc $_selectedLessonIndex');
      print(
          'üîÑ ƒê√£ thay ƒë·ªïi t·ª´ [${oldChapterIndex}:${oldLessonIndex}] sang [${_selectedChapterIndex}:${_selectedLessonIndex}]');

      // Th√¥ng b√°o UI c·∫≠p nh·∫≠t sau khi chuy·ªÉn b√†i h·ªçc
      notifyListeners();
      print('üì¢ ƒê√£ th√¥ng b√°o UI c·∫≠p nh·∫≠t');

      // Th√™m log ƒë·ªÉ ki·ªÉm tra th√¥ng tin b√†i h·ªçc hi·ªán t·∫°i sau khi chuy·ªÉn
      final currentLesson =
          _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex];
      print('üìù B√†i h·ªçc hi·ªán t·∫°i: ${currentLesson.title}');
      print('üß™ C√≥ b√†i ki·ªÉm tra: ${currentLesson.testType != null}');
      print('‚úÖ ƒê√£ ho√†n th√†nh: ${_completedLessons[currentLesson.id] == true}');
    } else {
      print(
          '‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo - ƒëi·ªÅu ki·ªán kh√¥ng th·ªèa m√£n');
    }
  }

  // Check if can navigate to next lesson
  bool canNavigateToNextLesson() {
    print('üîç Ki·ªÉm tra c√≥ th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo...');

    // If at the last lesson of the course
    if (_selectedChapterIndex == _courseData.length - 1 &&
        _selectedLessonIndex ==
            _courseData[_selectedChapterIndex].lessons.length - 1) {
      print('‚ùå ƒê√£ ·ªü b√†i h·ªçc cu·ªëi c√πng c·ªßa kh√≥a h·ªçc');
      return false;
    }

    // L·∫•y b√†i h·ªçc hi·ªán t·∫°i
    final currentLesson =
        _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex];

    // Log chi ti·∫øt v·ªÅ b√†i h·ªçc hi·ªán t·∫°i ƒë·ªÉ debug
    print('üìä Th√¥ng tin b√†i h·ªçc hi·ªán t·∫°i:');
    print('   - ID: ${currentLesson.id}');
    print('   - T√™n: ${currentLesson.title}');
    print('   - C√≥ b√†i ki·ªÉm tra: ${currentLesson.testType != null}');
    print('   - ƒê√£ ho√†n th√†nh: ${_completedLessons[currentLesson.id] == true}');

    // N·∫øu b√†i h·ªçc kh√¥ng c√≥ b√†i ki·ªÉm tra (testType = null), cho ph√©p chuy·ªÉn ti·∫øp
    if (currentLesson.testType == null) {
      print('‚úÖ B√†i h·ªçc kh√¥ng c√≥ b√†i ki·ªÉm tra - cho ph√©p chuy·ªÉn ti·∫øp');
      return true;
    }

    // If current lesson is not completed
    if (_completedLessons[currentLesson.id] != true) {
      print('‚ùå B√†i h·ªçc hi·ªán t·∫°i ch∆∞a ho√†n th√†nh: ${currentLesson.id}');
      return false;
    }

    // If next lesson is locked
    if (_selectedLessonIndex <
        _courseData[_selectedChapterIndex].lessons.length - 1) {
      // Next lesson in the same chapter
      final nextLesson =
          _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex + 1];
      if (!nextLesson.isUnlocked) {
        print(
            '‚ùå B√†i h·ªçc ti·∫øp theo trong c√πng ch∆∞∆°ng b·ªã kh√≥a: ${nextLesson.id}');
        return false;
      }
    } else if (_selectedChapterIndex < _courseData.length - 1) {
      // First lesson of next chapter
      final nextLesson = _courseData[_selectedChapterIndex + 1].lessons[0];
      if (!nextLesson.isUnlocked) {
        print(
            '‚ùå B√†i h·ªçc ƒë·∫ßu ti√™n c·ªßa ch∆∞∆°ng ti·∫øp theo b·ªã kh√≥a: ${nextLesson.id}');
        return false;
      }
    }

    print('‚úÖ C√≥ th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo');
    return true;
  }

  // LESSON COMPLETION METHODS

  // Mark a lesson as completed
  void onLessonCompleted(String lessonId) {
    print('üîÑ onLessonCompleted: ƒê√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc $lessonId');
    _completedLessons[lessonId] = true;
    print(
        '  ‚úÖ ƒê√£ ƒë·∫∑t _completedLessons[$lessonId] = ${_completedLessons[lessonId]}');

    // Ki·ªÉm tra l·∫°i gi√° tr·ªã sau khi c·∫≠p nh·∫≠t
    print(
        '  üîç Ki·ªÉm tra l·∫°i gi√° tr·ªã: _completedLessons[$lessonId] = ${_completedLessons[lessonId]}');
    print('  üîç Ki·ªÉu d·ªØ li·ªáu c·ªßa lessonId: ${lessonId.runtimeType}');

    // In ra to√†n b·ªô danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh ƒë·ªÉ ki·ªÉm tra
    print('  üìã Danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh sau khi c·∫≠p nh·∫≠t:');
    _completedLessons.forEach((key, value) {
      print('    - B√†i h·ªçc ID: $key (${key.runtimeType}), Ho√†n th√†nh: $value');
    });

    // T√¨m th√¥ng tin v·ªÅ b√†i h·ªçc v√† ch∆∞∆°ng h·ªçc
    int chapterId = 0;
    int lessonIdInt = 0;
    Lesson? completedLesson;

    try {
      // Chuy·ªÉn ƒë·ªïi lessonId t·ª´ String sang int
      lessonIdInt = int.parse(lessonId);
    } catch (e) {
      print('  ‚ùå L·ªói chuy·ªÉn ƒë·ªïi lessonId sang int: $e');
    }

    // T√¨m ch∆∞∆°ng ch·ª©a b√†i h·ªçc
    for (final chapter in _courseData) {
      for (final lesson in chapter.lessons) {
        if (lesson.id == lessonId) {
          completedLesson = lesson;
          try {
            chapterId = int.parse(chapter.id);
          } catch (e) {
            print('  ‚ùå L·ªói chuy·ªÉn ƒë·ªïi chapterId sang int: $e');
          }
          break;
        }
      }
      if (completedLesson != null) break;
    }

    print(
        '  üìù B√†i h·ªçc ho√†n th√†nh: ${completedLesson?.title ?? "kh√¥ng t√¨m th·∫•y"}');
    print('  üß™ C√≥ b√†i ki·ªÉm tra: ${completedLesson?.testType != null}');

    // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc tr√™n server
    if (chapterId > 0 && lessonIdInt > 0) {
      _updateLessonCompletionOnServer(chapterId, lessonIdInt);
    }

    // Unlock next lesson
    _unlockNextLesson(lessonId);

    // N·∫øu c√≥ callback v√† b√†i h·ªçc c√≥ b√†i ki·ªÉm tra, g·ªçi callback
    if (_onStartTestCallback != null &&
        completedLesson != null &&
        completedLesson.testType != null) {
      print('  üß™ Chu·∫©n b·ªã g·ªçi callback b√†i ki·ªÉm tra');
      Future.delayed(const Duration(milliseconds: 500), () {
        _onStartTestCallback!(completedLesson!);
      });
    } else {
      // N·∫øu kh√¥ng c√≥ b√†i ki·ªÉm tra, t·ª± ƒë·ªông ch·ªçn b√†i h·ªçc ch∆∞a ho√†n th√†nh ti·∫øp theo
      print('  üîç T·ª± ƒë·ªông ch·ªçn b√†i h·ªçc ch∆∞a ho√†n th√†nh ti·∫øp theo');
      _selectNextIncompleteLesson();
    }

    notifyListeners();
    print('  üì¢ ƒê√£ th√¥ng b√°o c·∫≠p nh·∫≠t UI');
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc tr√™n server
  Future<void> _updateLessonCompletionOnServer(
      int chapterId, int lessonId) async {
    try {
      // L·∫•y accountId t·ª´ SharedPrefs
      final accountId = await SharedPrefs.getUserId();

      if (_courseLessonResponse == null ||
          _courseLessonResponse!.courseId == 0) {
        print('  ‚ùå Kh√¥ng c√≥ th√¥ng tin kh√≥a h·ªçc ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i h·ªçc');
        return;
      }

      final courseId = _courseLessonResponse!.courseId;

      print('  üîÑ G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc:');
      print('    - accountId: $accountId');
      print('    - courseId: $courseId');
      print('    - chapterId: $chapterId');
      print('    - lessonId: $lessonId');

      // S·ª≠ d·ª•ng CourseProgressRepository ƒë·ªÉ g·ªçi API
      final courseProgressRepository = sl<CourseProgressRepository>();
      final response = await courseProgressRepository.unlockNextLesson(
          accountId.toString(), courseId, chapterId, lessonId);

      print('  ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i h·ªçc th√†nh c√¥ng: ${response.message}');
    } catch (e) {
      print('  ‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i h·ªçc tr√™n server: $e');
    }
  }

  // Unlock the next lesson after completing current one
  void _unlockNextLesson(String completedLessonId) {
    // Find current chapter and lesson
    int chapterIndex = -1;
    int lessonIndex = -1;

    for (int i = 0; i < _courseData.length; i++) {
      for (int j = 0; j < _courseData[i].lessons.length; j++) {
        if (_courseData[i].lessons[j].id == completedLessonId) {
          chapterIndex = i;
          lessonIndex = j;
          break;
        }
      }
      if (chapterIndex != -1) break;
    }

    if (chapterIndex != -1 && lessonIndex != -1) {
      // If not the last lesson in the chapter
      if (lessonIndex < _courseData[chapterIndex].lessons.length - 1) {
        _courseData[chapterIndex].lessons[lessonIndex + 1].isUnlocked = true;
      }
      // If it's the last lesson in the chapter and there's a next chapter
      else if (chapterIndex < _courseData.length - 1) {
        _courseData[chapterIndex + 1].lessons[0].isUnlocked = true;
      }
    }
  }

  // TEST RELATED METHODS

  // Set test result
  void setTestResult(double result) {
    _testResult = result;

    // If test is passed, find and select the next incomplete lesson
    if (isTestPassed()) {
      print('üéâ B√†i ki·ªÉm tra ƒë·∫°t y√™u c·∫ßu, t√¨m b√†i h·ªçc ti·∫øp theo');

      // Delay a bit to ensure UI updates properly
      Future.delayed(const Duration(milliseconds: 500), () {
        _selectNextIncompleteLesson();
      });
    }

    notifyListeners();
  }

  // Calculate if test is passed
  bool isTestPassed() {
    return _testResult >= 7.0;
  }

  // Get current chapter and lesson
  CourseChapter? get currentChapter => _courseData.isNotEmpty &&
          _selectedChapterIndex >= 0 &&
          _selectedChapterIndex < _courseData.length
      ? _courseData[_selectedChapterIndex]
      : null;

  Lesson? get currentLesson {
    if (_courseData.isEmpty ||
        _selectedChapterIndex < 0 ||
        _selectedChapterIndex >= _courseData.length) {
      return null;
    }

    final chapter = _courseData[_selectedChapterIndex];

    if (chapter.lessons.isEmpty ||
        _selectedLessonIndex < 0 ||
        _selectedLessonIndex >= chapter.lessons.length) {
      return null;
    }

    return chapter.lessons[_selectedLessonIndex];
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ l·∫•y icon ph√π h·ª£p cho b√†i h·ªçc d·ª±a v√†o lo·∫°i b√†i h·ªçc
  IconData getLessonIcon(Lesson lesson) {
    if (lesson.testType != null) {
      return Icons.quiz;
    } else if (lesson.videoUrl != null && lesson.videoUrl!.isNotEmpty) {
      return Icons.play_arrow;
    } else if (lesson.documentUrl != null && lesson.documentUrl!.isNotEmpty) {
      return Icons.description;
    } else {
      // M·∫∑c ƒë·ªãnh
      return lesson.type == LessonType.video ? Icons.play_arrow : Icons.quiz;
    }
  }

  // Setter cho callback b√†i ki·ªÉm tra
  set onStartTest(Function(Lesson) callback) {
    _onStartTestCallback = callback;
  }
}
