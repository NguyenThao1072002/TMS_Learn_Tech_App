import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:tms_app/core/DI/service_locator.dart'; // Import sl t·ª´ service_locator
import 'package:tms_app/domain/usecases/my_course/course_lesson_usecase.dart';
import 'package:tms_app/data/models/my_course/learn_lesson_model.dart';
import 'package:tms_app/presentation/screens/my_account/my_course/take_test.dart';
import 'package:tms_app/presentation/widgets/my_course/test_instruction.dart';
import 'package:dio/dio.dart';
import 'package:tms_app/data/services/my_course/course_lesson_service.dart';
import 'package:tms_app/data/repositories/my_course/course_lesson_repository_impl.dart';
import 'package:tms_app/presentation/widgets/my_course/lesson_summary_widget.dart';
import 'package:tms_app/presentation/widgets/my_course/continue_learning_dialog.dart';
import 'package:tms_app/presentation/widgets/my_course/lesson_materials_widget.dart';
import 'package:tms_app/presentation/widgets/my_course/comment_item_widget.dart';
import 'package:tms_app/presentation/widgets/my_course/complete_lesson_button.dart';
import 'package:tms_app/presentation/widgets/my_course/test_results_dialog.dart';
import 'package:tms_app/presentation/widgets/my_course/lesson_content_widget.dart';
import 'package:tms_app/presentation/controller/my_course/my_course_controller.dart';
import 'package:provider/provider.dart';
import 'package:tms_app/domain/usecases/my_course/content_test_usecase.dart';
import 'package:tms_app/data/models/my_course/test/content_test_model.dart';

// Enum for lesson types
enum LessonType { video, test }

// Enum for material types
enum MaterialType {
  pdf,
  document,
  presentation,
  spreadsheet,
  image,
  code,
  other,
}

// Material item model
class MaterialItem {
  final String title;
  final String description;
  final MaterialType type;
  final String url;

  const MaterialItem({
    required this.title,
    required this.description,
    required this.type,
    required this.url,
  });
}

// Course chapter model
class CourseChapter {
  final int id;
  final String title;
  final List<Lesson> lessons;

  CourseChapter({
    required this.id,
    required this.title,
    required this.lessons,
  });
}

// Lesson model
class Lesson {
  final String id;
  final String title;
  final String duration;
  final LessonType type;
  bool isUnlocked;
  final int? questionCount;
  final String? videoUrl; // URL video t·ª´ API
  final String? documentUrl; // URL t√†i li·ªáu t·ª´ API
  final String? testType; // Lo·∫°i b√†i ki·ªÉm tra (Test B√†i/Test Ch∆∞∆°ng)
  final int? testId; // ID b√†i ki·ªÉm tra (n·∫øu c√≥)
  final int? videoId; // ID video t·ª´ API

  Lesson({
    required this.id,
    required this.title,
    required this.duration,
    required this.type,
    required this.isUnlocked,
    this.questionCount,
    this.videoUrl,
    this.documentUrl,
    this.testType,
    this.testId,
    this.videoId,
  });
}

class EnrollCourseScreen extends StatefulWidget {
  final int courseId;
  final String courseTitle;
  final bool startOver;
  final bool viewAllLessons;
  final bool startVideo;
  final bool showMaterials;
  final bool showLessonContent;
  final String videoUrl;
  final List<MaterialItem> materials;
  final String summary;
  final Function(String) onCommentSubmit;
  final Lesson currentLesson;
  final CourseChapter currentChapter;

  const EnrollCourseScreen({
    super.key,
    required this.courseId,
    required this.courseTitle,
    this.startOver = false,
    this.viewAllLessons = false,
    this.startVideo = false,
    this.showMaterials = false,
    this.showLessonContent = false,
    this.videoUrl = '',
    this.materials = const [],
    this.summary = '',
    required this.onCommentSubmit,
    required this.currentLesson,
    required this.currentChapter,
  });

  @override
  State<EnrollCourseScreen> createState() => _EnrollCourseScreenState();
}

class _EnrollCourseScreenState extends State<EnrollCourseScreen>
    with SingleTickerProviderStateMixin {
  // Controller for managing business logic
  late MyCourseController _controller;

  // Additional UI state variables that don't belong in controller
  bool _isWatchingVideo = false;
  final bool _isTakingTest = false;
  bool _isVideoPlaying = false;
  late TabController _tabController;

  @override
  void initState() {
    super.initState();

    // Initialize TabController for UI
    _tabController = TabController(length: 3, vsync: this);

    // Initialize controller from dependency injection
    _controller = sl<MyCourseController>();

    // L·∫Øng nghe s·ª± thay ƒë·ªïi t·ª´ controller ƒë·ªÉ c·∫≠p nh·∫≠t UI
    _controller.addListener(() {
      if (mounted) {
        setState(() {
          // UI s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi controller thay ƒë·ªïi
          print('üîÑ UI ƒë∆∞·ª£c c·∫≠p nh·∫≠t do controller thay ƒë·ªïi');
          print('üîÑ Ch∆∞∆°ng hi·ªán t·∫°i: ${_controller.selectedChapterIndex}');
          print('üîÑ B√†i h·ªçc hi·ªán t·∫°i: ${_controller.selectedLessonIndex}');

          // Force rebuild v√† focus v√†o b√†i h·ªçc hi·ªán t·∫°i
          _forceUpdateCurrentLesson();
        });
      }
    });

    // Load course data using the controller
    _loadCourseData();
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ ƒë·∫£m b·∫£o UI lu√¥n hi·ªÉn th·ªã b√†i h·ªçc hi·ªán t·∫°i ch√≠nh x√°c
  void _forceUpdateCurrentLesson() {
    // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ controller
    final currentChapter = _controller.currentChapter;
    final currentLesson = _controller.currentLesson;

    if (currentChapter != null && currentLesson != null) {
      print('üìå Force update UI ƒë·ªÉ hi·ªÉn th·ªã:');
      print('   - Ch∆∞∆°ng: ${currentChapter.title}');
      print('   - B√†i h·ªçc: ${currentLesson.title}');

      // Y√™u c·∫ßu UI c·∫≠p nh·∫≠t l·∫°i
      Future.microtask(() {
        if (mounted) {
          setState(() {
            // Kh√¥ng c·∫ßn l√†m g√¨, ch·ªâ c·∫ßn trigger rebuild
          });
        }
      });
    }
  }

  // Load course data using the controller
  Future<void> _loadCourseData() async {
    try {
      await _controller.initialize(widget.courseId);
      // Force rebuild UI after data loaded successfully
      if (mounted) setState(() {});
    } catch (e) {
      print('Error loading course data: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc: $e'),
            backgroundColor: Colors.red,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  // Ch·ªâ m·ª•c ch∆∞∆°ng ƒëang ƒë∆∞·ª£c ch·ªçn
  int _selectedChapterIndex = 0;

  // Ch·ªâ m·ª•c b√†i h·ªçc ƒëang ƒë∆∞·ª£c ch·ªçn
  int _selectedLessonIndex = 0;

  // Tr·∫°ng th√°i m·ªü r·ªông/thu g·ªçn c·ªßa c√°c ch∆∞∆°ng
  late List<bool> _expandedChapters;

  // Tr·∫°ng th√°i ho√†n th√†nh c·ªßa c√°c b√†i h·ªçc
  late Map<String, bool> _completedLessons;

  // D·ªØ li·ªáu gi·∫£ l·∫≠p kh√≥a h·ªçc
  late List<CourseChapter> _courseData;

  // ƒêang t·∫£i d·ªØ li·ªáu
  bool _isLoading = true;

  // ƒêi·ªÉm ki·ªÉm tra (gi·∫£ l·∫≠p)
  double result = 7.5;

  // C√¢u h·ªèi ki·ªÉm tra (gi·∫£ l·∫≠p)
  final List<Map<String, dynamic>> testQuestions = [
    {'id': 1, 'points': 1.0},
    {'id': 2, 'points': 1.0},
    {'id': 3, 'points': 1.0},
    {'id': 4, 'points': 1.0},
    {'id': 5, 'points': 1.0},
    {'id': 6, 'points': 1.0},
    {'id': 7, 'points': 1.0},
    {'id': 8, 'points': 1.0},
    {'id': 9, 'points': 1.0},
    {'id': 10, 'points': 1.0},
  ];

  // Additional properties
  Lesson? _currentLesson;
  String? _selectedLessonId;
  final bool _isCompletingLesson = false;

  // Khai b√°o useCase s·ª≠ d·ª•ng DI ch√≠nh th·ªëng
  late CourseLessonUseCase _courseLessonUseCase;

  // Add course data from API response
  CourseLessonResponse? _courseLessonResponse;

  // ƒê·∫∑t l·∫°i ti·∫øn ƒë·ªô kh√≥a h·ªçc t·ª´ ƒë·∫ßu
  void _resetCourseProgress() {
    setState(() {
      // ƒê·∫∑t l·∫°i t·∫•t c·∫£ c√°c b√†i h·ªçc v·ªÅ tr·∫°ng th√°i ch∆∞a ho√†n th√†nh
      _completedLessons = {};

      // Ch·ªçn b√†i h·ªçc ƒë·∫ßu ti√™n
      _selectedChapterIndex = 0;
      _selectedLessonIndex = 0;

      // Ch·ªâ m·ªü r·ªông ch∆∞∆°ng ƒë·∫ßu ti√™n
      _expandedChapters =
          List.generate(_courseData.length, (index) => index == 0);

      // Hi·ªÉn th·ªã th√¥ng b√°o
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
              'ƒê√£ ƒë·∫∑t l·∫°i ti·∫øn ƒë·ªô kh√≥a h·ªçc. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu.'),
          backgroundColor: Colors.blue,
          behavior: SnackBarBehavior.floating,
        ),
      );
    });
  }

  // M·ªü r·ªông t·∫•t c·∫£ c√°c ch∆∞∆°ng ƒë·ªÉ xem to√†n b·ªô b√†i h·ªçc
  void _expandAllChapters() {
    // M·ªü r·ªông t·∫•t c·∫£ c√°c ch∆∞∆°ng th√¥ng qua controller
    setState(() {
      // M·ªü r·ªông t·∫•t c·∫£ c√°c ch∆∞∆°ng
      _expandedChapters = List.generate(_courseData.length, (index) => true);
      // Hi·ªÉn th·ªã thanh b√™n trong ch·∫ø ƒë·ªô di ƒë·ªông
      _controller.setSidebarVisibility(true);
    });
  }

  // Hi·ªÉn th·ªã popup ti·∫øp t·ª•c h·ªçc
  void _showContinueLearningPopup() async {
    // T√≠nh to√°n ph·∫ßn trƒÉm ti·∫øn ƒë·ªô kh√≥a h·ªçc
    int totalLessons = 0;
    int completedLessons = 0;

    // ƒê·ª£i d·ªØ li·ªáu kh√≥a h·ªçc ƒë∆∞·ª£c t·∫£i xong
    if (_controller.isLoading) {
      await Future.delayed(const Duration(seconds: 1));
    }

    // Th√™m m·ªôt ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi animation
    await Future.delayed(const Duration(milliseconds: 300));

    // N·∫øu widget ƒë√£ b·ªã h·ªßy (navigate away), tho√°t
    if (!mounted) return;

    // T√≠nh t·ªïng s·ªë b√†i h·ªçc v√† s·ªë b√†i h·ªçc ƒë√£ ho√†n th√†nh
    for (var chapter in _controller.courseData) {
      totalLessons += chapter.lessons.length.toInt();
      for (var lesson in chapter.lessons) {
        if (_controller.completedLessons[lesson.id] == true) {
          completedLessons++;
        }
      }
    }

    // T√≠nh ph·∫ßn trƒÉm ho√†n th√†nh
    final courseProgress = totalLessons > 0
        ? ((completedLessons / totalLessons) * 100).round()
        : 0;

    // T√¨m b√†i h·ªçc ti·∫øp theo c·∫ßn h·ªçc
    String lastLessonTitle = "B√†i 1: T·ªïng quan v·ªÅ kh√≥a h·ªçc";

    // T√¨m b√†i h·ªçc ƒë·∫ßu ti√™n ch∆∞a ho√†n th√†nh
    outerLoop:
    for (var chapter in _controller.courseData) {
      for (var lesson in chapter.lessons) {
        if (_controller.completedLessons[lesson.id] != true &&
            lesson.isUnlocked) {
          lastLessonTitle = lesson.title;
          break outerLoop;
        }
      }
    }

    // Hi·ªÉn th·ªã dialog
    final result = await ContinueLearningDialog.show(
      context,
      courseTitle: widget.courseTitle,
      courseProgress: courseProgress,
      lastLessonTitle: lastLessonTitle,
      thumbnailUrl:
          'https://img.youtube.com/vi/default/maxresdefault.jpg', // URL m·∫´u
    );

    // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ dialog
    if (result == 1) {
      // Ng∆∞·ªùi d√πng ch·ªçn Ti·∫øp t·ª•c h·ªçc, hi·ªÉn th·ªã tab n·ªôi dung b√†i h·ªçc
      setState(() {
        _controller
            .setSidebarVisibility(false); // Hi·ªÉn th·ªã tab n·ªôi dung b√†i h·ªçc
      });
    } else if (result == 2) {
      // Ng∆∞·ªùi d√πng ch·ªçn Xem t√†i li·ªáu kh√≥a h·ªçc
      setState(() {
        _controller.setSidebarVisibility(true); // Hi·ªÉn th·ªã danh s√°ch b√†i h·ªçc
        // Chuy·ªÉn ƒë·∫øn tab t√†i li·ªáu
        Future.delayed(const Duration(milliseconds: 100), () {
          if (_tabController != null) {
            _tabController.animateTo(1);
          }
        });
      });
    } else if (result == 3) {
      // Ng∆∞·ªùi d√πng ch·ªçn Xem t·∫•t c·∫£ b√†i h·ªçc, hi·ªÉn th·ªã danh s√°ch b√†i h·ªçc
      setState(() {
        _controller.setSidebarVisibility(true); // Hi·ªÉn th·ªã danh s√°ch b√†i h·ªçc
        _controller.expandAllChapters(); // M·ªü r·ªông t·∫•t c·∫£ c√°c ch∆∞∆°ng
      });
    }
  }

  // T·∫£i d·ªØ li·ªáu kh√≥a h·ªçc t·ª´ API
  Future<void> _initApiDataLoading() async {
    setState(() {
      _isLoading = true;
    });

    try {
      print('B·∫Øt ƒë·∫ßu g·ªçi API l·∫•y d·ªØ li·ªáu kh√≥a h·ªçc ${widget.courseId}');

      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu kh√≥a h·ªçc
      final courseLessonResponse =
          await _courseLessonUseCase.getCourseLessons(widget.courseId);

      print(
          'ƒê√£ nh·∫≠n d·ªØ li·ªáu t·ª´ API, c√≥ ${courseLessonResponse.chapters.length} ch∆∞∆°ng');

      // L∆∞u d·ªØ li·ªáu API ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
      _courseLessonResponse = courseLessonResponse;

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ API sang ƒë·ªãnh d·∫°ng c·ª•c b·ªô
      _courseData = _convertApiDataToLocalFormat(courseLessonResponse);

      print(
          'ƒê√£ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu API th√†nh ƒë·ªãnh d·∫°ng c·ª•c b·ªô: ${_courseData.length} ch∆∞∆°ng');

      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã th√¥ng b√°o
      if (_courseData.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Kh√≥a h·ªçc n√†y ch∆∞a c√≥ n·ªôi dung'),
            backgroundColor: Colors.orange,
            behavior: SnackBarBehavior.floating,
          ),
        );
      }

      // Kh·ªüi t·∫°o tr·∫°ng th√°i m·ªü r·ªông cho c√°c ch∆∞∆°ng
      _expandedChapters =
          List.generate(_courseData.length, (index) => index == 0);

      // Kh·ªüi t·∫°o tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc
      _completedLessons = {};

      print('ƒê√£ t·∫£i xong d·ªØ li·ªáu API');
    } catch (e) {
      print('L·ªói khi t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc: $e');

      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu kh√≥a h·ªçc: $e'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );

      // Kh·ªüi t·∫°o m·∫£ng r·ªóng ƒë·ªÉ tr√°nh l·ªói null
      _courseData = [];
    }

    setState(() {
      _isLoading = false;
    });
  }

  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu API sang ƒë·ªãnh d·∫°ng c·ª•c b·ªô
  List<CourseChapter> _convertApiDataToLocalFormat(
      CourseLessonResponse apiData) {
    final List<CourseChapter> chapters = [];

    for (final chapter in apiData.chapters) {
      final List<Lesson> lessons = [];

      // Chuy·ªÉn ƒë·ªïi b√†i h·ªçc
      for (final apiLesson in chapter.lessons) {
        // X√°c ƒë·ªãnh ki·ªÉu b√†i h·ªçc - ∆∞u ti√™n n·ªôi dung video n·∫øu c√≥
        final LessonType lessonType = (apiLesson.video != null &&
                apiLesson.video!.videoUrl != null &&
                apiLesson.video!.videoUrl.isNotEmpty)
            ? LessonType.video
            : (apiLesson.lessonTest != null
                ? LessonType.test
                : LessonType.video);

        // Chuy·ªÉn ƒë·ªïi th·ªùi l∆∞·ª£ng t·ª´ gi√¢y sang ƒë·ªãnh d·∫°ng ph√∫t:gi√¢y
        final String duration = _formatDuration(apiLesson.lessonDuration);

        // T·∫°o ƒë·ªëi t∆∞·ª£ng Lesson
        final lesson = Lesson(
          id: apiLesson.lessonId.toString(),
          title: apiLesson.lessonTitle,
          duration: duration,
          type: lessonType,
          isUnlocked: true, // Gi·∫£ s·ª≠ t·∫•t c·∫£ b√†i h·ªçc ƒë·ªÅu ƒë√£ m·ªü kh√≥a
          questionCount: apiLesson.lessonTest != null
              ? 10
              : null, // Gi·∫£ s·ª≠ m·ªói b√†i ki·ªÉm tra c√≥ 10 c√¢u h·ªèi
          videoUrl: apiLesson.video != null ? apiLesson.video!.videoUrl : null,
          documentUrl:
              apiLesson.video != null ? apiLesson.video!.documentUrl : null,
          testType: apiLesson.lessonTest != null
              ? apiLesson.lessonTest!.testType
              : null,
          testId: apiLesson.lessonTest != null
              ? apiLesson.lessonTest!.testId
              : null,
        );

        lessons.add(lesson);
      }

      // Th√™m b√†i ki·ªÉm tra c·∫•p ch∆∞∆°ng n·∫øu c√≥
      if (chapter.chapterTest != null) {
        final chapterTest = Lesson(
          id: "chapter_test_${chapter.chapterId}",
          title: chapter.chapterTest!.testTitle,
          duration:
              "30 ph√∫t", // Gi·∫£ s·ª≠ th·ªùi gian l√†m b√†i ki·ªÉm tra ch∆∞∆°ng l√† 30 ph√∫t
          type: LessonType.test,
          isUnlocked: true,
          questionCount: 15, // Gi·∫£ s·ª≠ m·ªói b√†i ki·ªÉm tra ch∆∞∆°ng c√≥ 15 c√¢u h·ªèi
          videoUrl: null, // B√†i ki·ªÉm tra ch∆∞∆°ng kh√¥ng c√≥ video
          documentUrl: null, // B√†i ki·ªÉm tra ch∆∞∆°ng kh√¥ng c√≥ t√†i li·ªáu
          testType: chapter.chapterTest!.testType,
          testId: chapter.chapterTest!.testId,
        );

        lessons.add(chapterTest);
      }

      // T·∫°o ƒë·ªëi t∆∞·ª£ng CourseChapter
      final courseChapter = CourseChapter(
        id: chapter.chapterId,
        title: chapter.chapterTitle,
        lessons: lessons,
      );

      chapters.add(courseChapter);
    }

    return chapters;
  }

  // Chuy·ªÉn ƒë·ªïi th·ªùi l∆∞·ª£ng t·ª´ gi√¢y sang ƒë·ªãnh d·∫°ng ph√∫t:gi√¢y
  String _formatDuration(int seconds) {
    final int minutes = seconds ~/ 60;
    final int remainingSeconds = seconds % 60;
    return '$minutes:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  // Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u trong tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ API
  void _initializeSampleData() {
    print('Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u t·∫°m th·ªùi do kh√¥ng th·ªÉ k·∫øt n·ªëi API');

    // D·ªØ li·ªáu gi·∫£ l·∫≠p
    _courseData = [
      CourseChapter(
        id: 1,
        title: "Ch∆∞∆°ng 1: Gi·ªõi thi·ªáu kh√≥a h·ªçc (D·ªØ li·ªáu m·∫´u)",
        lessons: [
          Lesson(
            id: "1_1",
            title: "B√†i 1: T·ªïng quan v·ªÅ kh√≥a h·ªçc (D·ªØ li·ªáu m·∫´u)",
            duration: "10:15",
            type: LessonType.video,
            isUnlocked: true,
            videoUrl: "https://example.com/video1.mp4",
            documentUrl: "https://example.com/document1.pdf",
            testType: "Test B√†i",
            testId: 1,
          ),
          Lesson(
            id: "1_2",
            title: "B√†i 2: C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng (D·ªØ li·ªáu m·∫´u)",
            duration: "15:30",
            type: LessonType.video,
            isUnlocked: true,
            videoUrl: "https://example.com/video2.mp4",
            documentUrl: "https://example.com/document2.docx",
            testType: "Test B√†i",
            testId: 2,
          ),
          Lesson(
            id: "1_test",
            title: "B√†i ki·ªÉm tra ch∆∞∆°ng 1 (D·ªØ li·ªáu m·∫´u)",
            duration: "15 ph√∫t",
            type: LessonType.test,
            isUnlocked: true,
            questionCount: 5,
            videoUrl: "https://example.com/test_video.mp4",
            documentUrl: "https://example.com/test_document.pdf",
            testType: "Test B√†i",
            testId: 3,
          ),
        ],
      ),
      CourseChapter(
        id: 2,
        title: "Ch∆∞∆°ng 2: Ki·∫øn th·ª©c n·ªÅn t·∫£ng (D·ªØ li·ªáu m·∫´u)",
        lessons: [
          Lesson(
            id: "2_1",
            title: "B√†i 1: Ki·∫øn th·ª©c c∆° b·∫£n (D·ªØ li·ªáu m·∫´u)",
            duration: "12:30",
            type: LessonType.video,
            isUnlocked: true,
            videoUrl: "https://example.com/video3.mp4",
            documentUrl: "https://example.com/document3.pptx",
            testType: "Test B√†i",
            testId: 4,
          ),
          Lesson(
            id: "2_test",
            title: "B√†i ki·ªÉm tra ch∆∞∆°ng 2 (D·ªØ li·ªáu m·∫´u)",
            duration: "20 ph√∫t",
            type: LessonType.test,
            isUnlocked: true,
            questionCount: 8,
            videoUrl: "https://example.com/test_video2.mp4",
            documentUrl: "https://example.com/test_document2.docx",
            testType: "Test Ch∆∞∆°ng",
            testId: 5,
          ),
        ],
      ),
    ];

    // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
    Future.delayed(Duration.zero, () {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content:
                Text('ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u. K·∫øt n·ªëi m√°y ch·ªß th·∫•t b·∫°i.'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 5),
            behavior: SnackBarBehavior.floating,
          ),
        );
      }
    });

    // Kh·ªüi t·∫°o tr·∫°ng th√°i m·ªü r·ªông cho c√°c ch∆∞∆°ng
    _expandedChapters =
        List.generate(_courseData.length, (index) => index == 0);

    // Kh·ªüi t·∫°o tr·∫°ng th√°i ho√†n th√†nh b√†i h·ªçc (gi·∫£ l·∫≠p)
    _completedLessons = {};
  }

  // X·ª≠ l√Ω khi b√†i h·ªçc ƒë∆∞·ª£c ho√†n th√†nh
  void _onLessonCompleted(String lessonId) {
    setState(() {
      _completedLessons[lessonId] = true;

      // T√¨m v√† m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo
      _unlockNextLesson(lessonId);

      // Ki·ªÉm tra b√†i h·ªçc v·ª´a ho√†n th√†nh c√≥ b√†i ki·ªÉm tra kh√¥ng
      Lesson? completedLesson;

      // T√¨m b√†i h·ªçc v·ª´a ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh
      for (final chapter in _courseData) {
        for (final lesson in chapter.lessons) {
          if (lesson.id == lessonId) {
            completedLesson = lesson;
            break;
          }
        }
        if (completedLesson != null) break;
      }

      // N·∫øu b√†i h·ªçc c√≥ b√†i ki·ªÉm tra, chuy·ªÉn ƒë·∫øn b√†i ki·ªÉm tra
      if (completedLesson != null && completedLesson.testType != null) {
        // T·ª± ƒë·ªông chuy·ªÉn sang m√†n h√¨nh b√†i ki·ªÉm tra sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
        Future.delayed(const Duration(milliseconds: 500), () {
          if (mounted) {
            _startTest(completedLesson!);
          }
        });
      }
    });
  }

  // M·ªü kh√≥a b√†i h·ªçc ti·∫øp theo
  void _unlockNextLesson(String completedLessonId) {
    // T√¨m ch∆∞∆°ng v√† b√†i h·ªçc hi·ªán t·∫°i
    int chapterIndex = -1;
    int lessonIndex = -1;

    for (int i = 0; i < _courseData.length; i++) {
      for (int j = 0; j < _courseData[i].lessons.length; j++) {
        if (_courseData[i].lessons[j].id == completedLessonId) {
          chapterIndex = i;
          lessonIndex = j;
          break;
        }
      }
      if (chapterIndex != -1) break;
    }

    if (chapterIndex != -1 && lessonIndex != -1) {
      // N·∫øu kh√¥ng ph·∫£i b√†i h·ªçc cu·ªëi c√πng trong ch∆∞∆°ng
      if (lessonIndex < _courseData[chapterIndex].lessons.length - 1) {
        setState(() {
          _courseData[chapterIndex].lessons[lessonIndex + 1].isUnlocked = true;
        });
      }
      // N·∫øu l√† b√†i cu·ªëi c·ªßa ch∆∞∆°ng v√† c√≥ ch∆∞∆°ng ti·∫øp theo
      else if (chapterIndex < _courseData.length - 1) {
        setState(() {
          _courseData[chapterIndex + 1].lessons[0].isUnlocked = true;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_controller.isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: Text(widget.courseTitle),
          backgroundColor: Colors.white,
          foregroundColor: Colors.black,
          elevation: 0,
        ),
        body: const Center(
          child: CircularProgressIndicator(
            color: Colors.orange,
          ),
        ),
      );
    }

    if (_isWatchingVideo) {
      return _buildVideoPlayer();
    }

    if (_isTakingTest) {
      return _buildTestScreen();
    }

    // Ki·ªÉm tra k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ quy·∫øt ƒë·ªãnh layout
    final screenWidth = MediaQuery.of(context).size.width;
    final isTablet = screenWidth > 600; // Coi thi·∫øt b·ªã c√≥ width > 600 l√† tablet

    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.courseTitle,
          style: const TextStyle(fontSize: 18),
        ),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.analytics_outlined),
            onPressed: () {
              _showProgressStats();
            },
            tooltip: 'Th·ªëng k√™ ti·∫øn ƒë·ªô',
          ),
          IconButton(
            icon: const Icon(Icons.help_outline),
            onPressed: () {
              _showHelpDialog();
            },
            tooltip: 'Tr·ª£ gi√∫p',
          ),
        ],
      ),
      // S·ª≠ d·ª•ng layout kh√°c nhau d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
      body: isTablet ? _buildTabletLayout() : _buildMobileLayout(),
    );
  }

  // Layout cho m√†n h√¨nh tablet (ngang)
  Widget _buildTabletLayout() {
    return Row(
      children: [
        // Sidebar danh s√°ch ch∆∞∆°ng v√† b√†i h·ªçc (chi·∫øm 30% m√†n h√¨nh)
        Container(
          width: MediaQuery.of(context).size.width * 0.3,
          decoration: BoxDecoration(
            color: Colors.grey[100],
            border: Border(
              right: BorderSide(
                color: Colors.grey[300]!,
                width: 1,
              ),
            ),
          ),
          child: _buildLessonSidebar(),
        ),

        // N·ªôi dung b√†i h·ªçc (chi·∫øm 70% m√†n h√¨nh)
        Expanded(
          child: _buildLessonContent(),
        ),
      ],
    );
  }

  // Layout cho m√†n h√¨nh ƒëi·ªán tho·∫°i (d·ªçc)
  Widget _buildMobileLayout() {
    return Column(
      children: [
        // Tab bar cho ph√©p chuy·ªÉn ƒë·ªïi gi·ªØa n·ªôi dung v√† danh s√°ch b√†i h·ªçc
        Container(
          height: 48,
          decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
              bottom: BorderSide(color: Colors.grey[300]!),
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 5,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Row(
            children: [
              Expanded(
                child: InkWell(
                  onTap: () {
                    setState(() {
                      _controller.setSidebarVisibility(false);
                    });
                  },
                  child: Container(
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      border: Border(
                        bottom: BorderSide(
                          color: !_controller.showSidebarInMobile
                              ? Colors.orange
                              : Colors.transparent,
                          width: 3,
                        ),
                      ),
                    ),
                    child: Text(
                      'N·ªôi dung b√†i h·ªçc',
                      style: TextStyle(
                        color: !_controller.showSidebarInMobile
                            ? Colors.orange
                            : Colors.grey[700],
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
              Expanded(
                child: InkWell(
                  onTap: () {
                    setState(() {
                      _controller.setSidebarVisibility(true);
                    });
                  },
                  child: Container(
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                      border: Border(
                        bottom: BorderSide(
                          color: _controller.showSidebarInMobile
                              ? Colors.orange
                              : Colors.transparent,
                          width: 3,
                        ),
                      ),
                    ),
                    child: Text(
                      'Danh s√°ch b√†i h·ªçc',
                      style: TextStyle(
                        color: _controller.showSidebarInMobile
                            ? Colors.orange
                            : Colors.grey[700],
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),

        // N·ªôi dung ch√≠nh - hi·ªÉn th·ªã sidebar ho·∫∑c n·ªôi dung b√†i h·ªçc
        Expanded(
          child: _controller.showSidebarInMobile
              ? _buildLessonSidebar()
              : _buildLessonContent(),
        ),
      ],
    );
  }

  // Widget x√¢y d·ª±ng thanh b√™n danh s√°ch b√†i h·ªçc
  Widget _buildLessonSidebar() {
    if (_controller.courseData.isEmpty) {
      return const Center(
        child: Text('Kh√¥ng c√≥ d·ªØ li·ªáu b√†i h·ªçc'),
      );
    }

    // Ki·ªÉm tra xem c√≥ b√†i h·ªçc n√†o kh√¥ng
    bool hasAnyLesson = false;
    for (var chapter in _controller.courseData) {
      if (chapter.lessons.isNotEmpty) {
        hasAnyLesson = true;
        break;
      }
    }

    if (!hasAnyLesson) {
      return const Center(
        child: Text('Kh√≥a h·ªçc n√†y ch∆∞a c√≥ b√†i h·ªçc n√†o'),
      );
    }

    return ListView.builder(
      itemCount: _controller.courseData.length,
      padding: const EdgeInsets.symmetric(vertical: 16),
      itemBuilder: (context, chapterIndex) {
        final chapter = _controller.courseData[chapterIndex];
        final isExpanded = _controller.expandedChapters[chapterIndex];

        // T√≠nh s·ªë b√†i h·ªçc ƒë√£ ho√†n th√†nh trong ch∆∞∆°ng
        int completedLessons = 0;
        for (var lesson in chapter.lessons) {
          if (_controller.completedLessons[lesson.id] == true) {
            completedLessons++;
          }
        }

        return Column(
          children: [
            // Ti√™u ƒë·ªÅ ch∆∞∆°ng
            InkWell(
              onTap: () {
                setState(() {
                  _controller.toggleChapterExpanded(chapterIndex);
                });
              },
              child: Container(
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                color: _controller.selectedChapterIndex == chapterIndex
                    ? Colors.orange.withOpacity(0.1)
                    : Colors.transparent,
                child: Row(
                  children: [
                    Container(
                      width: 28,
                      height: 28,
                      decoration: BoxDecoration(
                        color: Colors.orange,
                        borderRadius: BorderRadius.circular(14),
                      ),
                      child: Center(
                        child: Text(
                          chapter.id.toString(),
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            chapter.title,
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            chapter.lessons.isEmpty
                                ? 'Ch∆∞a c√≥ b√†i h·ªçc'
                                : '$completedLessons/${chapter.lessons.length} b√†i h·ªçc',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey[600],
                            ),
                          ),
                        ],
                      ),
                    ),
                    Icon(
                      isExpanded
                          ? Icons.keyboard_arrow_up
                          : Icons.keyboard_arrow_down,
                      color: Colors.grey[600],
                    ),
                  ],
                ),
              ),
            ),

            // Danh s√°ch b√†i h·ªçc trong ch∆∞∆°ng - ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ b√†i h·ªçc
            if (isExpanded && chapter.lessons.isNotEmpty)
              ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: chapter.lessons.length,
                itemBuilder: (context, lessonIndex) {
                  final lesson = chapter.lessons[lessonIndex];
                  final isCompleted =
                      _controller.completedLessons[lesson.id] == true;
                  final isSelected =
                      _controller.selectedChapterIndex == chapterIndex &&
                          _controller.selectedLessonIndex == lessonIndex;

                  return InkWell(
                    onTap: lesson.isUnlocked
                        ? () {
                            setState(() {
                              _controller.selectLesson(
                                  chapterIndex, lessonIndex);
                              // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ƒëi·ªán tho·∫°i, chuy·ªÉn sang tab n·ªôi dung
                              if (MediaQuery.of(context).size.width <= 600) {
                                _controller.setSidebarVisibility(false);
                              }
                            });
                          }
                        : null,
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                      margin: const EdgeInsets.only(left: 16),
                      decoration: BoxDecoration(
                        color: isSelected
                            ? Colors.orange.withOpacity(0.2)
                            : Colors.transparent,
                        border: Border(
                          left: BorderSide(
                            color:
                                isSelected ? Colors.orange : Colors.grey[300]!,
                            width: 2,
                          ),
                        ),
                      ),
                      child: Row(
                        children: [
                          // Icon tr·∫°ng th√°i b√†i h·ªçc
                          Container(
                            width: 24,
                            height: 24,
                            decoration: BoxDecoration(
                              color: isCompleted
                                  ? Colors.green
                                  : lesson.isUnlocked
                                      ? Colors.grey[300]
                                      : Colors.grey[200],
                              shape: BoxShape.circle,
                            ),
                            child: Center(
                              child: Icon(
                                isCompleted
                                    ? Icons.check
                                    : lesson.isUnlocked
                                        ? _getLessonIcon(lesson)
                                        : Icons.lock,
                                size: 14,
                                color: isCompleted
                                    ? Colors.white
                                    : lesson.isUnlocked
                                        ? Colors.grey[700]
                                        : Colors.grey[400],
                              ),
                            ),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  lesson.title,
                                  style: TextStyle(
                                    fontSize: 13,
                                    fontWeight: isSelected
                                        ? FontWeight.bold
                                        : FontWeight.normal,
                                    color: lesson.isUnlocked
                                        ? Colors.black
                                        : Colors.grey[500],
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Row(
                                  children: [
                                    // Content type indicators
                                    if (lesson.videoUrl != null &&
                                        lesson.videoUrl!.isNotEmpty)
                                      _buildContentTypeIndicator(
                                          Icons.videocam, Colors.blue),
                                    if (lesson.documentUrl != null &&
                                        lesson.documentUrl!.isNotEmpty)
                                      _buildContentTypeIndicator(
                                          Icons.description, Colors.green),
                                    if (lesson.testType != null)
                                      _buildContentTypeIndicator(
                                          Icons.quiz, Colors.orange),
                                    const SizedBox(width: 4),
                                    Text(
                                      lesson.duration,
                                      style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey[600],
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),

            // ƒê∆∞·ªùng k·∫ª chia c√°c ch∆∞∆°ng
            if (chapterIndex < _controller.courseData.length - 1)
              Divider(
                color: Colors.grey[300],
                height: 1,
              ),
          ],
        );
      },
    );
  }

  // Widget x√¢y d·ª±ng n·ªôi dung b√†i h·ªçc
  Widget _buildLessonContent() {
    if (_controller.courseData.isEmpty) {
      return const Center(
        child: Text('Kh√¥ng c√≥ d·ªØ li·ªáu b√†i h·ªçc'),
      );
    }

    final currentChapter = _controller.currentChapter;
    final currentLesson = _controller.currentLesson;

    // Th√™m logs ƒë·ªÉ theo d√µi b√†i h·ªçc hi·ªán t·∫°i
    print('üîç _buildLessonContent ƒë∆∞·ª£c g·ªçi');
    print('üîç currentChapter: ${currentChapter?.title}');
    print('üîç currentLesson: ${currentLesson?.title}');
    print('üîç selectedChapterIndex: ${_controller.selectedChapterIndex}');
    print('üîç selectedLessonIndex: ${_controller.selectedLessonIndex}');

    if (currentChapter == null) {
      return const Center(
        child: Text('Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng h·ªçc ph√π h·ª£p'),
      );
    }

    if (currentLesson == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.menu_book,
              size: 64,
              color: Colors.orange,
            ),
            const SizedBox(height: 16),
            Text(
              'Ch∆∞∆°ng "${currentChapter.title}" ch∆∞a c√≥ b√†i h·ªçc n√†o',
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'N·ªôi dung ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t, vui l√≤ng quay l·∫°i sau',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ],
        ),
      );
    }

    // Get video URL and materials using controller
    String videoUrl = _controller.getVideoUrlForLesson(currentLesson);
    List<MaterialItem> materials =
        _controller.getMaterialsForLesson(currentLesson);

    return LessonContentWidget(
      // Th√™m key ƒë·ªÉ gi√∫p Flutter bi·∫øt khi n√†o rebuild widget
      key: ValueKey('lesson_${currentChapter.id}_${currentLesson.id}'),
      currentChapter: currentChapter,
      currentLesson: currentLesson,
      completedLessons: _controller.completedLessons,
      tabController: _tabController,
      summary: widget.summary,
      videoUrl: videoUrl,
      materials: materials,
      onCommentSubmit: widget.onCommentSubmit,
      onCompleteLesson: () {
        // Mark lesson as complete using controller
        _controller.onLessonCompleted(currentLesson.id);
        // ƒê√£ x√≥a ƒëo·∫°n hi·ªÉn th·ªã toast
      },
      onPreviousLesson: _controller.navigateToPreviousLesson,
      onNextLesson: _controller.navigateToNextLesson,
      canNavigateToPrevious: _controller.canNavigateToPreviousLesson(),
      canNavigateToNext: _controller.canNavigateToNextLesson(),
      showTestResults: () => _showTestResults(currentLesson),
      startTest: () => _startTest(currentLesson),
      openVideoInExternalPlayer: _openVideoInExternalPlayer,
    );
  }

  // Widget x√¢y d·ª±ng n·ªôi dung b√†i h·ªçc video - c·∫£i thi·ªán UI
  Widget _buildVideoLessonContent(Lesson lesson) {
    // Get video URL from API data if available
    String videoUrl = _getVideoUrlForLesson(lesson);

    return Container(
      color: Colors.white,
      child: Stack(
        children: [
          SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Video player (mock)
                AspectRatio(
                  aspectRatio: 16 / 9,
                  child: GestureDetector(
                    onTap: () {
                      setState(() {
                        _isVideoPlaying = !_isVideoPlaying;
                      });
                    },
                    child: Container(
                      color: Colors.black,
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          // Video placeholder (replace with actual video player in real app)
                          videoUrl.isNotEmpty
                              ? Image.network(
                                  'https://img.youtube.com/vi/default/maxresdefault.jpg', // Fallback thumbnail
                                  fit: BoxFit.cover,
                                  width: double.infinity,
                                  errorBuilder: (context, error, stackTrace) {
                                    return Container(
                                      color: Colors.grey[800],
                                      child: const Center(
                                        child: Icon(
                                          Icons.video_library,
                                          size: 64,
                                          color: Colors.white54,
                                        ),
                                      ),
                                    );
                                  },
                                )
                              : Container(
                                  color: Colors.grey[800],
                                  child: const Center(
                                    child: Icon(
                                      Icons.video_library,
                                      size: 64,
                                      color: Colors.white54,
                                    ),
                                  ),
                                ),

                          // Play button overlay
                          if (!_isVideoPlaying)
                            Container(
                              width: 80,
                              height: 80,
                              decoration: BoxDecoration(
                                color: Colors.black.withOpacity(0.5),
                                shape: BoxShape.circle,
                              ),
                              child: const Icon(
                                Icons.play_arrow,
                                size: 50,
                                color: Colors.white,
                              ),
                            ),
                        ],
                      ),
                    ),
                  ),
                ),

                // Hi·ªÉn th·ªã URL video th·ª±c t·∫ø (ƒë·ªÉ d·ªÖ ki·ªÉm tra, c√≥ th·ªÉ x√≥a sau)
                if (videoUrl.isNotEmpty)
                  Container(
                    padding: const EdgeInsets.all(12),
                    color: Colors.grey[100],
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Video URL t·ª´ API:',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          videoUrl,
                          style: const TextStyle(
                            fontSize: 12,
                            fontFamily: 'monospace',
                          ),
                        ),
                        const SizedBox(height: 8),
                        ElevatedButton.icon(
                          onPressed: () {
                            // T·∫°o intent ƒë·ªÉ m·ªü video trong tr√¨nh ph√°t b√™n ngo√†i
                            // ho·∫∑c tri·ªÉn khai tr√¨nh ph√°t video tr·ª±c ti·∫øp
                            _openVideoInExternalPlayer(videoUrl);
                          },
                          icon: const Icon(Icons.play_circle),
                          label: const Text('Xem video'),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.orange,
                            foregroundColor: Colors.white,
                          ),
                        ),
                      ],
                    ),
                  ),

                // Comment section
                CommentSectionWidget(
                  onCommentSubmit: (comment) {
                    // Handle comment submission
                    print('Submitted comment: $comment');
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('ƒê√£ g·ª≠i b√¨nh lu·∫≠n th√†nh c√¥ng'),
                        backgroundColor: Colors.green,
                        behavior: SnackBarBehavior.floating,
                      ),
                    );
                  },
                  // C·∫≠p nh·∫≠t videoId v√† lessonId ƒë·ªÉ kh·ªõp v·ªõi d·ªØ li·ªáu API th·ª±c t·∫ø
                  videoId: int.tryParse(lesson.id) ?? 0,
                  lessonId: _controller.currentChapter?.id ?? 0,
                ),

                // Add space at bottom for the fixed button
                const SizedBox(height: 80),
              ],
            ),
          ),

          // Fixed "Complete" button at bottom as navbar
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: CompleteLessonButton(
              isCompleted: _completedLessons[lesson.id] == true,
              onComplete: () {
                // Mark lesson as complete
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('ƒê√£ ho√†n th√†nh b√†i h·ªçc'),
                    behavior: SnackBarBehavior.floating,
                  ),
                );
                Navigator.pop(
                    context, true); // Tr·∫£ v·ªÅ true ƒë·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh
              },
            ),
          ),
        ],
      ),
    );
  }

  // L·∫•y URL video t·ª´ d·ªØ li·ªáu API d·ª±a tr√™n ID b√†i h·ªçc
  String _getVideoUrlForLesson(Lesson lesson) {
    if (_courseLessonResponse == null) {
      return '';
    }

    // Chuy·ªÉn ƒë·ªïi ID b√†i h·ªçc th√†nh int
    int lessonId;
    try {
      lessonId = int.parse(lesson.id);
    } catch (e) {
      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ID kh√¥ng ph·∫£i s·ªë (v√≠ d·ª•: "1_1", "chapter_test_1")
      if (lesson.id.startsWith('chapter_test_')) {
        // ƒê√¢y l√† b√†i ki·ªÉm tra c·∫•p ch∆∞∆°ng, kh√¥ng c√≥ video
        return '';
      }

      // Th·ª≠ tr√≠ch xu·∫•t ID t·ª´ ƒë·ªãnh d·∫°ng "chapter_lesson" (v√≠ d·ª•: "1_1" -> 1)
      final parts = lesson.id.split('_');
      if (parts.length >= 2) {
        try {
          lessonId = int.parse(parts[1]);
        } catch (e) {
          print('Kh√¥ng th·ªÉ ph√¢n t√≠ch ID b√†i h·ªçc: ${lesson.id}');
          return '';
        }
      } else {
        return '';
      }
    }

    // T√¨m ch∆∞∆°ng v√† b√†i h·ªçc trong d·ªØ li·ªáu API
    for (final chapter in _courseLessonResponse!.chapters) {
      for (final apiLesson in chapter.lessons) {
        if (apiLesson.lessonId == lessonId) {
          // T√¨m th·∫•y b√†i h·ªçc, ki·ªÉm tra xem c√≥ video kh√¥ng
          if (apiLesson.video != null) {
            return apiLesson.video!.videoUrl;
          }
        }
      }
    }

    return '';
  }

  // M·ªü video trong tr√¨nh ph√°t b√™n ngo√†i
  void _openVideoInExternalPlayer(String videoUrl) {
    if (videoUrl.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Kh√¥ng c√≥ URL video kh·∫£ d·ª•ng'),
          behavior: SnackBarBehavior.floating,
        ),
      );
      return;
    }

    // Trong ·ª©ng d·ª•ng th·ª±c t·∫ø, b·∫°n s·∫Ω s·ª≠ d·ª•ng url_launcher ho·∫∑c intent ƒë·ªÉ m·ªü video
    // T·∫°m th·ªùi ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('ƒêang m·ªü video trong tr√¨nh ph√°t ngo√†i...'),
        action: SnackBarAction(
          label: 'OK',
          onPressed: () {},
        ),
        behavior: SnackBarBehavior.floating,
      ),
    );

    // TODO: Tri·ªÉn khai m·ªü video trong tr√¨nh ph√°t th·ª±c t·∫ø
    // V√≠ d·ª•:
    // url_launcher.launch(videoUrl);
  }

  // Widget x√¢y d·ª±ng n·ªôi dung b√†i ki·ªÉm tra
  Widget _buildTestLessonContent(Lesson lesson) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Banner b√†i ki·ªÉm tra
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [Colors.orange, Colors.deepOrange],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.quiz,
                      color: Colors.white,
                      size: 32,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          lesson.title,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'Th·ªùi gian: ${lesson.duration} | ${lesson.questionCount} c√¢u h·ªèi',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.9),
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'H∆∞·ªõng d·∫´n l√†m b√†i',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.deepOrange,
                      ),
                    ),
                    const SizedBox(height: 12),
                    TestInstruction(
                      icon: Icons.timer,
                      text: 'Th·ªùi gian l√†m b√†i: ${lesson.duration}',
                    ),
                    const SizedBox(height: 8),
                    TestInstruction(
                      icon: Icons.question_answer,
                      text: 'S·ªë c√¢u h·ªèi: ${lesson.questionCount} c√¢u',
                    ),
                    const SizedBox(height: 8),
                    const TestInstruction(
                      icon: Icons.check_circle,
                      text: 'ƒêi·ªÉm ƒë·∫°t: 70% s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng',
                    ),
                    const SizedBox(height: 8),
                    const TestInstruction(
                      icon: Icons.refresh,
                      text: 'C√≥ th·ªÉ l√†m l·∫°i n·∫øu kh√¥ng ƒë·∫°t',
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 32),

        // Th√¥ng tin b√†i ki·ªÉm tra
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Th√¥ng tin quan tr·ªçng',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                'B√†i ki·ªÉm tra n√†y ƒë√°nh gi√° ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ n·ªôi dung ƒë√£ h·ªçc. B·∫°n c·∫ßn ƒë·∫°t t·ªëi thi·ªÉu 70% s·ªë c√¢u ƒë√∫ng ƒë·ªÉ v∆∞·ª£t qua v√† m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo.',
                style: TextStyle(
                  fontSize: 15,
                  height: 1.5,
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                'L∆∞u √Ω:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              const Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.blue, size: 18),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'B·∫°n kh√¥ng th·ªÉ chuy·ªÉn sang b√†i h·ªçc ti·∫øp theo n·∫øu ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra n√†y.',
                      style: TextStyle(
                        color: Colors.blue,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              const Row(
                children: [
                  Icon(Icons.warning_amber, color: Colors.orange, size: 18),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ xem k·ªπ t·∫•t c·∫£ b√†i gi·∫£ng tr∆∞·ªõc khi l√†m b√†i ki·ªÉm tra.',
                      style: TextStyle(
                        color: Colors.orange,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),

        const SizedBox(height: 32),

        // N√∫t b·∫Øt ƒë·∫ßu l√†m b√†i
        Center(
          child: ElevatedButton.icon(
            onPressed: _completedLessons[widget.currentLesson.id] == true
                ? () {
                    // Xem l·∫°i k·∫øt qu·∫£
                    _showTestResults(widget.currentLesson);
                  }
                : () {
                    // B·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra
                    _startTest(widget.currentLesson);
                  },
            icon: Icon(_completedLessons[widget.currentLesson.id] == true
                ? Icons.assessment
                : Icons.play_arrow),
            label: Text(
              _completedLessons[widget.currentLesson.id] == true
                  ? 'Xem l·∫°i k·∫øt qu·∫£'
                  : 'B·∫Øt ƒë·∫ßu l√†m b√†i',
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor:
                  _completedLessons[widget.currentLesson.id] == true
                      ? Colors.blue
                      : Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(
                horizontal: 32,
                vertical: 16,
              ),
              textStyle: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ],
    );
  }

  // Hi·ªÉn th·ªã dialog k·∫øt qu·∫£ b√†i ki·ªÉm tra
  void _showTestResults(Lesson lesson) {
    // Use controller's test result and check if passed
    final bool isPassed = _controller.isTestPassed();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return TestResultsDialog(
          result: _controller.testResult,
          totalQuestions: testQuestions.length,
          pointsPerQuestion: testQuestions.first['points'],
          isPassed: isPassed,
          onContinue: () {
            Navigator.of(context).pop();
          },
          onRetry: () {
            Navigator.of(context).pop();
            _startTest(lesson); // L√†m l·∫°i b√†i ki·ªÉm tra
          },
          onReview: () {
            Navigator.of(context).pop();
          },
        );
      },
    );
  }

  // Ki·ªÉm tra c√≥ th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc tr∆∞·ªõc ƒë√≥
  bool _canNavigateToPreviousLesson() {
    if (_selectedChapterIndex == 0 && _selectedLessonIndex == 0) {
      return false;
    }
    return true;
  }

  // Ki·ªÉm tra c√≥ th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo
  bool _canNavigateToNextLesson() {
    // N·∫øu ƒëang ·ªü b√†i cu·ªëi c√πng c·ªßa kh√≥a h·ªçc
    if (_selectedChapterIndex == _courseData.length - 1 &&
        _selectedLessonIndex ==
            _courseData[_selectedChapterIndex].lessons.length - 1) {
      return false;
    }

    // N·∫øu b√†i h·ªçc hi·ªán t·∫°i ch∆∞a ho√†n th√†nh
    final currentLesson =
        _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex];
    if (_completedLessons[currentLesson.id] != true) {
      return false;
    }

    // N·∫øu b√†i ti·∫øp theo b·ªã kh√≥a
    if (_selectedLessonIndex <
        _courseData[_selectedChapterIndex].lessons.length - 1) {
      // B√†i ti·∫øp theo trong c√πng ch∆∞∆°ng
      final nextLesson =
          _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex + 1];
      if (!nextLesson.isUnlocked) {
        return false;
      }
    } else if (_selectedChapterIndex < _courseData.length - 1) {
      // B√†i ƒë·∫ßu ti√™n c·ªßa ch∆∞∆°ng ti·∫øp theo
      final nextLesson = _courseData[_selectedChapterIndex + 1].lessons[0];
      if (!nextLesson.isUnlocked) {
        return false;
      }
    }

    return true;
  }

  // Chuy·ªÉn ƒë·∫øn b√†i h·ªçc tr∆∞·ªõc ƒë√≥
  void _navigateToPreviousLesson() {
    setState(() {
      if (_selectedLessonIndex > 0) {
        // Quay l·∫°i b√†i tr∆∞·ªõc trong c√πng ch∆∞∆°ng
        _selectedLessonIndex--;
      } else if (_selectedChapterIndex > 0) {
        // Chuy·ªÉn ƒë·∫øn b√†i cu·ªëi c√πng c·ªßa ch∆∞∆°ng tr∆∞·ªõc ƒë√≥
        _selectedChapterIndex--;
        _selectedLessonIndex =
            _courseData[_selectedChapterIndex].lessons.length - 1;

        // ƒê·∫£m b·∫£o ch∆∞∆°ng ƒë∆∞·ª£c m·ªü r·ªông khi chuy·ªÉn ƒë·∫øn
        _expandedChapters[_selectedChapterIndex] = true;
      }
    });
  }

  // Chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo
  void _navigateToNextLesson() {
    setState(() {
      if (_selectedLessonIndex <
          _courseData[_selectedChapterIndex].lessons.length - 1) {
        // Chuy·ªÉn ƒë·∫øn b√†i ti·∫øp theo trong c√πng ch∆∞∆°ng
        _selectedLessonIndex++;
      } else if (_selectedChapterIndex < _courseData.length - 1) {
        // Chuy·ªÉn ƒë·∫øn b√†i ƒë·∫ßu ti√™n c·ªßa ch∆∞∆°ng ti·∫øp theo
        _selectedChapterIndex++;
        _selectedLessonIndex = 0;

        // ƒê·∫£m b·∫£o ch∆∞∆°ng ƒë∆∞·ª£c m·ªü r·ªông khi chuy·ªÉn ƒë·∫øn
        _expandedChapters[_selectedChapterIndex] = true;
      }
    });
  }

  // Hi·ªÉn th·ªã th·ªëng k√™ ti·∫øn ƒë·ªô kh√≥a h·ªçc
  void _showProgressStats() {
    // T√≠nh s·ªë b√†i h·ªçc ƒë√£ ho√†n th√†nh
    int totalLessons = 0;
    int completedLessons = 0;

    for (var chapter in _controller.courseData) {
      totalLessons += chapter.lessons.length.toInt();
      for (var lesson in chapter.lessons) {
        if (_controller.completedLessons[lesson.id] == true) {
          completedLessons++;
        }
      }
    }

    final completionPercent = (completedLessons / totalLessons * 100).toInt();

    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Ti·∫øn ƒë·ªô kh√≥a h·ªçc',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 24),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.orange,
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.bar_chart,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '$completionPercent% ho√†n th√†nh',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.orange,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Container(
                          height: 8,
                          decoration: BoxDecoration(
                            color: Colors.grey[200],
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: FractionallySizedBox(
                            alignment: Alignment.centerLeft,
                            widthFactor: completedLessons / totalLessons,
                            child: Container(
                              decoration: BoxDecoration(
                                color: Colors.orange,
                                borderRadius: BorderRadius.circular(4),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'ƒê√£ ho√†n th√†nh $completedLessons/$totalLessons b√†i h·ªçc',
                          style: TextStyle(
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 24),
            const Text(
              'Chi ti·∫øt theo ch∆∞∆°ng',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Expanded(
              child: ListView.builder(
                shrinkWrap: true,
                itemCount: _controller.courseData.length,
                itemBuilder: (context, index) {
                  final chapter = _controller.courseData[index];
                  int chapterCompletedLessons = 0;

                  for (var lesson in chapter.lessons) {
                    if (_controller.completedLessons[lesson.id] == true) {
                      chapterCompletedLessons++;
                    }
                  }

                  final chapterPercent =
                      (chapterCompletedLessons / chapter.lessons.length * 100)
                          .toInt();

                  return ListTile(
                    contentPadding: EdgeInsets.zero,
                    title: Text(
                      chapter.title,
                      style: const TextStyle(fontWeight: FontWeight.w500),
                    ),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 4),
                        Container(
                          height: 4,
                          decoration: BoxDecoration(
                            color: Colors.grey[200],
                            borderRadius: BorderRadius.circular(2),
                          ),
                          child: FractionallySizedBox(
                            alignment: Alignment.centerLeft,
                            widthFactor: chapterCompletedLessons /
                                chapter.lessons.length,
                            child: Container(
                              decoration: BoxDecoration(
                                color: chapterPercent == 100
                                    ? Colors.green
                                    : Colors.orange,
                                borderRadius: BorderRadius.circular(2),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '$chapterCompletedLessons/${chapter.lessons.length} b√†i h·ªçc ($chapterPercent%)',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[600],
                          ),
                        ),
                        if (index < _controller.courseData.length - 1)
                          const Divider(),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Hi·ªÉn th·ªã dialog tr·ª£ gi√∫p
  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.help_outline, color: Colors.blue[700]),
            const SizedBox(width: 8),
            const Text('Tr·ª£ gi√∫p'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildHelpItem(
              icon: Icons.lock,
              title: 'M·ªü kh√≥a b√†i h·ªçc',
              description:
                  'Ho√†n th√†nh b√†i h·ªçc hi·ªán t·∫°i ƒë·ªÉ m·ªü kh√≥a b√†i ti·∫øp theo.',
            ),
            const SizedBox(height: 16),
            _buildHelpItem(
              icon: Icons.quiz,
              title: 'B√†i ki·ªÉm tra',
              description:
                  'ƒê·∫°t t·ªëi thi·ªÉu 70% c√¢u ƒë√∫ng ƒë·ªÉ v∆∞·ª£t qua b√†i ki·ªÉm tra v√† m·ªü kh√≥a n·ªôi dung ti·∫øp theo.',
            ),
            const SizedBox(height: 16),
            _buildHelpItem(
              icon: Icons.video_library,
              title: 'Xem video',
              description:
                  'Xem h·∫øt video v√† ƒë√°nh d·∫•u ho√†n th√†nh ƒë·ªÉ ti·∫øp t·ª•c ti·∫øn tr√¨nh h·ªçc t·∫≠p.',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ƒê√£ hi·ªÉu'),
          ),
        ],
      ),
    );
  }

  // Build m·ª•c tr·ª£ gi√∫p
  Widget _buildHelpItem({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.blue.withOpacity(0.1),
            shape: BoxShape.circle,
          ),
          child: Icon(
            icon,
            size: 20,
            color: Colors.blue[700],
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: const TextStyle(
                  fontSize: 13,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  // X√¢y d·ª±ng tr√¨nh ph√°t video
  Widget _buildVideoPlayer() {
    return Container(
      color: Colors.black,
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.play_circle_outline,
              size: 80,
              color: Colors.white.withOpacity(0.8),
            ),
            const SizedBox(height: 20),
            const Text(
              'Video Player',
              style: TextStyle(
                color: Colors.white,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            ElevatedButton.icon(
              onPressed: () {
                setState(() {
                  _isWatchingVideo = false;
                });
              },
              icon: const Icon(Icons.arrow_back),
              label: const Text('Quay l·∫°i b√†i h·ªçc'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // X√¢y d·ª±ng m√†n h√¨nh ki·ªÉm tra
  Widget _buildTestScreen() {
    Lesson currentLesson = _getCurrentLesson();

    // ƒêang t·∫£i d·ªØ li·ªáu
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(
          color: Colors.orange,
        ),
      );
    }

    // L·∫•y ID b√†i ki·ªÉm tra t·ª´ ID b√†i h·ªçc
    int testId = currentLesson.testId ?? 0;

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ b√†i ki·ªÉm tra
    if (testId == 0) {
      return const Center(
        child: Text('B√†i h·ªçc n√†y kh√¥ng c√≥ b√†i ki·ªÉm tra'),
      );
    }

    // Kh·ªüi t·∫°o ContentTestUseCase t·ª´ DI
    final contentTestUseCase = sl<ContentTestUseCase>();

    // L·∫•y d·ªØ li·ªáu b√†i ki·ªÉm tra t·ª´ API
    return FutureBuilder<ContentTestModel>(
      future: contentTestUseCase.getContentTest(testId),
      builder: (context, snapshot) {
        // ƒêang t·∫£i
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(
            child: CircularProgressIndicator(
              color: Colors.orange,
            ),
          );
        }

        // L·ªói
        if (snapshot.hasError) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.error_outline,
                  color: Colors.red,
                  size: 48,
                ),
                const SizedBox(height: 16),
                Text(
                  'Kh√¥ng th·ªÉ t·∫£i b√†i ki·ªÉm tra: ${snapshot.error}',
                  style: const TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    setState(() {});
                  },
                  child: const Text('Th·ª≠ l·∫°i'),
                ),
              ],
            ),
          );
        }

        // Th√†nh c√¥ng
        if (snapshot.hasData) {
          return TakeTestScreen(
            contentTest: snapshot.data!,
            contentTestUseCase: contentTestUseCase,
          );
        }

        // M·∫∑c ƒë·ªãnh
        return const Center(
          child: Text('Kh√¥ng c√≥ d·ªØ li·ªáu b√†i ki·ªÉm tra'),
        );
      },
    );
  }

  // Widget x√¢y d·ª±ng n·ªôi dung t√†i li·ªáu b√†i h·ªçc
  Widget _buildLessonMaterials(Lesson lesson) {
    // Get materials from API data
    List<MaterialItem> materials = _getMaterialsForLesson(lesson);

    // If no materials found in API, use sample data
    if (materials.isEmpty) {
      // Sample material data as fallback
      materials = [
        const MaterialItem(
          title: 'T√†i li·ªáu gi·ªõi thi·ªáu kh√≥a h·ªçc',
          description: 'T·ªïng quan v·ªÅ c√°c n·ªôi dung v√† m·ª•c ti√™u c·ªßa kh√≥a h·ªçc',
          type: MaterialType.pdf,
          url: 'https://example.com/intro.pdf',
        ),
        const MaterialItem(
          title: 'H∆∞·ªõng d·∫´n th·ª±c h√†nh',
          description: 'C√°c b∆∞·ªõc th·ª±c h√†nh chi ti·∫øt cho b√†i h·ªçc n√†y',
          type: MaterialType.document,
          url: 'https://example.com/guide.docx',
        ),
      ];
    }

    // Use the extracted widget
    return LessonMaterialsWidget(
      materials: materials,
      lessonTitle: lesson.title,
    );
  }

  // L·∫•y t√†i li·ªáu t·ª´ d·ªØ li·ªáu API d·ª±a tr√™n ID b√†i h·ªçc
  List<MaterialItem> _getMaterialsForLesson(Lesson lesson) {
    if (_courseLessonResponse == null) {
      return [];
    }

    List<MaterialItem> materials = [];

    // Chuy·ªÉn ƒë·ªïi ID b√†i h·ªçc th√†nh int
    int lessonId;
    try {
      lessonId = int.parse(lesson.id);
    } catch (e) {
      // X·ª≠ l√Ω ID kh√¥ng ph·∫£i s·ªë nh∆∞ trong _getVideoUrlForLesson
      if (lesson.id.startsWith('chapter_test_')) {
        return [];
      }

      final parts = lesson.id.split('_');
      if (parts.length >= 2) {
        try {
          lessonId = int.parse(parts[1]);
        } catch (e) {
          print('Kh√¥ng th·ªÉ ph√¢n t√≠ch ID b√†i h·ªçc: ${lesson.id}');
          return [];
        }
      } else {
        return [];
      }
    }

    // T√¨m b√†i h·ªçc trong d·ªØ li·ªáu API
    for (final chapter in _courseLessonResponse!.chapters) {
      for (final apiLesson in chapter.lessons) {
        if (apiLesson.lessonId == lessonId) {
          // T√¨m th·∫•y b√†i h·ªçc, ki·ªÉm tra xem c√≥ t√†i li·ªáu kh√¥ng
          if (apiLesson.video != null && apiLesson.video!.documentUrl != null) {
            // L·∫•y URL t√†i li·ªáu
            final String documentUrl = apiLesson.video!.documentUrl!;

            // X√°c ƒë·ªãnh lo·∫°i t√†i li·ªáu d·ª±a tr√™n ph·∫ßn m·ªü r·ªông
            MaterialType materialType = _getMaterialTypeFromUrl(documentUrl);

            // T·∫°o ti√™u ƒë·ªÅ v√† m√¥ t·∫£ t·ª± ƒë·ªông
            String title = 'T√†i li·ªáu c·ªßa ${apiLesson.lessonTitle}';
            String description = 'T√†i li·ªáu b·ªï sung cho b√†i h·ªçc n√†y';

            if (apiLesson.video!.documentShort != null &&
                apiLesson.video!.documentShort!.isNotEmpty) {
              description = apiLesson.video!.documentShort!;
            }

            // T·∫°o ƒë·ªëi t∆∞·ª£ng MaterialItem
            MaterialItem material = MaterialItem(
              title: title,
              description: description,
              type: materialType,
              url: documentUrl,
            );

            materials.add(material);
          }
        }
      }
    }

    return materials;
  }

  // X√°c ƒë·ªãnh lo·∫°i t√†i li·ªáu d·ª±a tr√™n URL
  MaterialType _getMaterialTypeFromUrl(String url) {
    final String lowercaseUrl = url.toLowerCase();

    if (lowercaseUrl.endsWith('.pdf')) {
      return MaterialType.pdf;
    } else if (lowercaseUrl.endsWith('.doc') ||
        lowercaseUrl.endsWith('.docx')) {
      return MaterialType.document;
    } else if (lowercaseUrl.endsWith('.ppt') ||
        lowercaseUrl.endsWith('.pptx')) {
      return MaterialType.presentation;
    } else if (lowercaseUrl.endsWith('.xls') ||
        lowercaseUrl.endsWith('.xlsx')) {
      return MaterialType.spreadsheet;
    } else if (lowercaseUrl.endsWith('.jpg') ||
        lowercaseUrl.endsWith('.jpeg') ||
        lowercaseUrl.endsWith('.png') ||
        lowercaseUrl.endsWith('.gif')) {
      return MaterialType.image;
    } else if (lowercaseUrl.endsWith('.zip') || lowercaseUrl.endsWith('.rar')) {
      return MaterialType.code;
    } else {
      return MaterialType.other;
    }
  }

  // Helper widget for material category cards
  Widget _buildMaterialCategoryCard({
    required IconData icon,
    required String title,
    required String subtitle,
    required Color color,
  }) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.all(4),
      shadowColor: color.withOpacity(0.3),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('M·ªü danh m·ª•c: $title'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
        borderRadius: BorderRadius.circular(16),
        child: Container(
          width: 140,
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  color: color,
                  size: 24,
                ),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 14,
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper widget for material cards
  Widget _buildMaterialCard(MaterialItem material) {
    return Card(
      elevation: 1,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('M·ªü t√†i li·ªáu: ${material.title}'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Material icon
              Container(
                width: 56,
                height: 56,
                decoration: BoxDecoration(
                  color: _getMaterialColor(material.type).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Center(
                  child: Icon(
                    _getMaterialIcon(material.type),
                    size: 28,
                    color: _getMaterialColor(material.type),
                  ),
                ),
              ),
              const SizedBox(width: 16),

              // Material details
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      material.title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 6),
                    Text(
                      material.description,
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                        height: 1.3,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),

                    // Action buttons
                    Row(
                      children: [
                        _buildMaterialActionButton(
                          icon: Icons.visibility,
                          label: 'Xem',
                          color: Colors.blue,
                        ),
                        const SizedBox(width: 8),
                        _buildMaterialActionButton(
                          icon: Icons.download,
                          label: 'T·∫£i v·ªÅ',
                          color: Colors.green,
                        ),
                        const SizedBox(width: 8),
                        _buildMaterialActionButton(
                          icon: Icons.bookmark_border,
                          label: 'L∆∞u',
                          color: Colors.orange,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper widget for material action buttons
  Widget _buildMaterialActionButton({
    required IconData icon,
    required String label,
    required Color color,
  }) {
    return InkWell(
      onTap: () {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('$label t√†i li·ªáu'),
            behavior: SnackBarBehavior.floating,
          ),
        );
      },
      borderRadius: BorderRadius.circular(4),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              icon,
              size: 16,
              color: color,
            ),
            const SizedBox(width: 4),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: color,
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper widget for community buttons
  Widget _buildCommunityButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(8),
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(8),
          boxShadow: [
            BoxShadow(
              color: Colors.blue.shade100.withOpacity(0.3),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 18, color: Colors.blue),
            const SizedBox(width: 8),
            Flexible(
              child: Text(
                label,
                style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Helper widget for discussion items
  Widget _buildDiscussionItem({
    required String avatarUrl,
    required String username,
    required String timeAgo,
    required String title,
    required int replies,
    required int views,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('M·ªü th·∫£o lu·∫≠n: $title'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                // User avatar
                ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: Image.network(
                    avatarUrl,
                    width: 32,
                    height: 32,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) => Container(
                      width: 32,
                      height: 32,
                      color: Colors.grey[300],
                      child: const Icon(Icons.person,
                          size: 20, color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(width: 8),

                // Username and time
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      username,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      timeAgo,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Discussion title
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 12),

            // Stats
            Row(
              children: [
                Row(
                  children: [
                    Icon(Icons.forum, size: 16, color: Colors.grey[600]),
                    const SizedBox(width: 4),
                    Text(
                      '$replies ph·∫£n h·ªìi',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
                const SizedBox(width: 16),
                Row(
                  children: [
                    Icon(Icons.visibility, size: 16, color: Colors.grey[600]),
                    const SizedBox(width: 4),
                    Text(
                      '$views l∆∞·ª£t xem',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Helper widget for supplementary resources
  Widget _buildSupplementaryResource({
    required IconData icon,
    required String title,
    required String description,
  }) {
    return InkWell(
      onTap: () {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('M·ªü $title'),
            behavior: SnackBarBehavior.floating,
          ),
        );
      },
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(
                icon,
                color: Colors.orange,
                size: 24,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    description,
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
            const Icon(
              Icons.arrow_forward_ios,
              size: 16,
              color: Colors.grey,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSummaryContent() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'T√≥m t·∫Øt b√†i h·ªçc',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            widget.summary,
            style: const TextStyle(fontSize: 16, height: 1.6),
          ),
          const SizedBox(height: 24),

          // Key points
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.orange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.orange.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Row(
                  children: [
                    Icon(Icons.lightbulb, color: Colors.orange),
                    SizedBox(width: 8),
                    Text(
                      'ƒêi·ªÉm ch√≠nh',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.orange,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                // Sample key points
                ..._buildKeyPoints(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> _buildKeyPoints() {
    final keyPoints = [
      'Hi·ªÉu v·ªÅ c·∫•u tr√∫c c∆° b·∫£n c·ªßa ·ª©ng d·ª•ng Flutter',
      'S·ª≠ d·ª•ng th√†nh th·∫°o StatefulWidget v√† StatelessWidget',
      'Tri·ªÉn khai qu·∫£n l√Ω tr·∫°ng th√°i hi·ªáu qu·∫£',
      '√Åp d·ª•ng nguy√™n t·∫Øc thi·∫øt k·∫ø UI cho ·ª©ng d·ª•ng di ƒë·ªông',
    ];

    return keyPoints.map((point) {
      return Padding(
        padding: const EdgeInsets.only(bottom: 8),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Icon(Icons.check_circle, size: 16, color: Colors.orange),
            const SizedBox(width: 8),
            Expanded(child: Text(point, style: const TextStyle(fontSize: 16))),
          ],
        ),
      );
    }).toList();
  }

  Color _getMaterialColor(MaterialType type) {
    switch (type) {
      case MaterialType.pdf:
        return Colors.red;
      case MaterialType.document:
        return Colors.blue;
      case MaterialType.presentation:
        return Colors.orange;
      case MaterialType.spreadsheet:
        return Colors.green;
      case MaterialType.image:
        return Colors.purple;
      case MaterialType.code:
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }

  IconData _getMaterialIcon(MaterialType type) {
    switch (type) {
      case MaterialType.pdf:
        return Icons.picture_as_pdf;
      case MaterialType.document:
        return Icons.description;
      case MaterialType.presentation:
        return Icons.slideshow;
      case MaterialType.spreadsheet:
        return Icons.table_chart;
      case MaterialType.image:
        return Icons.image;
      case MaterialType.code:
        return Icons.code;
      default:
        return Icons.insert_drive_file;
    }
  }

  Widget _buildTestFAB() {
    return FloatingActionButton.extended(
      onPressed: () {
        _showTestConfirmation();
      },
      backgroundColor: Colors.orange,
      icon: const Icon(Icons.quiz),
      label: const Text('Ki·ªÉm tra b√†i h·ªçc'),
    );
  }

  void _showTestConfirmation() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('B·∫Øt ƒë·∫ßu ki·ªÉm tra?'),
        content: const Text(
          'B·∫°n c√≥ mu·ªën l√†m b√†i ki·ªÉm tra ki·∫øn th·ª©c b√†i h·ªçc n√†y kh√¥ng? B·∫°n c·∫ßn ƒë·∫°t √≠t nh·∫•t 70% ƒë·ªÉ ƒë·∫°t.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('ƒê·ªÉ sau'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // Here you would navigate to the test screen
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('ƒêang m·ªü b√†i ki·ªÉm tra'),
                  behavior: SnackBarBehavior.floating,
                ),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('B·∫Øt ƒë·∫ßu ngay'),
          ),
        ],
      ),
    );
  }

  void _showOptionsMenu(BuildContext context) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (context) {
        return Container(
          padding: const EdgeInsets.symmetric(vertical: 20),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.picture_in_picture),
                title: const Text('Ch·∫ø ƒë·ªô thu nh·ªè'),
                onTap: () {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô thu nh·ªè'),
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.download),
                title: const Text('T·∫£i xu·ªëng b√†i h·ªçc'),
                onTap: () {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('ƒêang t·∫£i xu·ªëng b√†i h·ªçc'),
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.share),
                title: const Text('Chia s·∫ª'),
                onTap: () {
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('ƒêang m·ªü t√πy ch·ªçn chia s·∫ª'),
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }

  // Helper widget to build progress item
  Widget _buildProgressItem({
    required IconData icon,
    required String label,
    required String value,
    required Color color,
  }) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(10),
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            shape: BoxShape.circle,
          ),
          child: Icon(
            icon,
            color: color,
            size: 24,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: color,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey.shade600,
          ),
        ),
      ],
    );
  }

  // Helper widget hi·ªÉn th·ªã ƒëi·ªÉm ch√≠nh
  Widget _buildKeyPointItem(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
              color: Colors.amber.shade100,
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.check,
              size: 16,
              color: Colors.amber.shade800,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              text,
              style: const TextStyle(
                fontSize: 16,
                height: 1.4,
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Helper widget hi·ªÉn th·ªã g·ª£i √Ω
  Widget _buildTipItem(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
              color: Colors.green.shade100,
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.tips_and_updates,
              size: 16,
              color: Colors.green.shade800,
            ),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              text,
              style: const TextStyle(
                fontSize: 16,
                height: 1.4,
                color: Colors.black87,
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Helper widget hi·ªÉn th·ªã link t√†i li·ªáu tham kh·∫£o
  Widget _buildResourceLinkItem({
    required IconData icon,
    required String title,
    required String url,
  }) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('M·ªü li√™n k·∫øt: $url'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 8),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Icon(
                  icon,
                  size: 20,
                  color: Colors.blue.shade700,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    color: Colors.black87,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Icon(
                Icons.open_in_new,
                size: 18,
                color: Colors.grey.shade600,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // L·∫•y b√†i h·ªçc hi·ªán t·∫°i
  Lesson _getCurrentLesson() {
    if (_courseData.isNotEmpty &&
        _selectedChapterIndex < _courseData.length &&
        _selectedLessonIndex <
            _courseData[_selectedChapterIndex].lessons.length) {
      return _courseData[_selectedChapterIndex].lessons[_selectedLessonIndex];
    } else {
      throw Exception("Invalid lesson index");
    }
  }

  // Build test instruction item
  Widget buildTestInstruction({
    required IconData icon,
    required String text,
    Color? color,
  }) {
    return Row(
      children: [
        Icon(icon, size: 16, color: color ?? Colors.grey[700]),
        const SizedBox(width: 8),
        Text(
          text,
          style: TextStyle(
            fontSize: 14,
            color: color ?? Colors.grey[800],
          ),
        ),
      ],
    );
  }

  // Widget ƒë·ªÉ hi·ªÉn th·ªã item b√¨nh lu·∫≠n
  Widget _buildCommentItem({
    required String username,
    required String timeAgo,
    required String content,
    required String avatarUrl,
    required int likes,
  }) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 3,
            offset: const Offset(0, 1),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              // Avatar
              CircleAvatar(
                radius: 16,
                backgroundImage: NetworkImage(avatarUrl),
                onBackgroundImageError: (exception, stackTrace) =>
                    const Icon(Icons.person),
              ),
              const SizedBox(width: 8),
              // Username and time
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      username,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 14,
                      ),
                    ),
                    Text(
                      timeAgo,
                      style: TextStyle(
                        color: Colors.grey[600],
                        fontSize: 12,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          // Comment content
          Text(
            content,
            style: const TextStyle(fontSize: 14, height: 1.3),
          ),
          const SizedBox(height: 8),
          // Actions
          Row(
            children: [
              Icon(Icons.thumb_up_outlined, size: 16, color: Colors.grey[600]),
              const SizedBox(width: 4),
              Text(
                '$likes',
                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
              ),
              const SizedBox(width: 16),
              Icon(Icons.reply_outlined, size: 16, color: Colors.grey[600]),
              const SizedBox(width: 4),
              Text(
                'Tr·∫£ l·ªùi',
                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // B·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra
  void _startTest(Lesson lesson) {
    // L·∫•y ID b√†i ki·ªÉm tra t·ª´ thu·ªôc t√≠nh testId
    int testId = lesson.testId ?? 0;

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ b√†i ki·ªÉm tra
    if (testId == 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('B√†i h·ªçc n√†y kh√¥ng c√≥ b√†i ki·ªÉm tra'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    // Kh·ªüi t·∫°o ContentTestUseCase t·ª´ DI
    final contentTestUseCase = sl<ContentTestUseCase>();

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
    setState(() {
      _isLoading = true;
    });

    // Log chi ti·∫øt ƒë·ªÉ debug
    debugPrint('üß™ B·∫Øt ƒë·∫ßu l·∫•y b√†i ki·ªÉm tra:');
    debugPrint('üß™ - ID b√†i ki·ªÉm tra t·ª´ API: $testId');
    debugPrint('üß™ - ID b√†i h·ªçc t∆∞∆°ng ·ª©ng: ${lesson.id}');
    debugPrint('üß™ - Ti√™u ƒë·ªÅ b√†i h·ªçc: ${lesson.title}');
    debugPrint('üß™ - Lo·∫°i b√†i ki·ªÉm tra: ${lesson.testType}');

    // L·∫•y d·ªØ li·ªáu b√†i ki·ªÉm tra t·ª´ API
    contentTestUseCase.getContentTest(testId).then((contentTest) {
      // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i
      setState(() {
        _isLoading = false;
      });

      // Log k·∫øt qu·∫£ API ƒë·ªÉ debug
      debugPrint('‚úÖ ƒê√£ nh·∫≠n ph·∫£n h·ªìi API b√†i ki·ªÉm tra:');
      debugPrint('‚úÖ - Ti√™u ƒë·ªÅ: ${contentTest.testTitle}');
      debugPrint('‚úÖ - S·ªë c√¢u h·ªèi: ${contentTest.questionList.length}');

      // Ki·ªÉm tra xem questionList c√≥ tr·ªëng kh√¥ng
      if (contentTest.questionList.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('B√†i ki·ªÉm tra kh√¥ng c√≥ c√¢u h·ªèi n√†o'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 3),
          ),
        );
        return; // Kh√¥ng chuy·ªÉn ƒë·∫øn m√†n h√¨nh ki·ªÉm tra n·∫øu kh√¥ng c√≥ c√¢u h·ªèi
      }

      // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh l√†m b√†i ki·ªÉm tra
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) {
            return TakeTestScreen(
              contentTest: contentTest,
              contentTestUseCase: contentTestUseCase,
              onNextLesson: () {
                // Chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo
                if (_controller.canNavigateToNextLesson()) {
                  _controller.navigateToNextLesson();
                  // Th√¥ng b√°o chuy·ªÉn th√†nh c√¥ng
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('ƒê√£ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo'),
                      backgroundColor: Colors.green,
                    ),
                  );
                } else {
                  // Th√¥ng b√°o kh√¥ng th·ªÉ chuy·ªÉn
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo'),
                      backgroundColor: Colors.orange,
                    ),
                  );
                }
              },
              onTestCompleted: (double score) {
                // C·∫≠p nh·∫≠t k·∫øt qu·∫£ v√† ƒë√°nh d·∫•u ho√†n th√†nh n·∫øu ƒë·∫°t ƒëi·ªÉm
                _controller.setTestResult(score);
                if (_controller.isTestPassed()) {
                  _controller.onLessonCompleted(lesson.id);
                }
              },
            );
          },
        ),
      ).then((result) {
        // X·ª≠ l√Ω k·∫øt qu·∫£ khi quay l·∫°i t·ª´ m√†n h√¨nh ki·ªÉm tra
        if (result != null && result is double) {
          // Hi·ªÉn th·ªã k·∫øt qu·∫£
          _showTestResults(lesson);
        }
      });
    }).catchError((error) {
      // T·∫Øt tr·∫°ng th√°i ƒëang t·∫£i v√† hi·ªÉn th·ªã th√¥ng b√°o l·ªói
      setState(() {
        _isLoading = false;
      });

      debugPrint('‚ùå L·ªói khi l·∫•y b√†i ki·ªÉm tra: $error');

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Kh√¥ng th·ªÉ t·∫£i b√†i ki·ªÉm tra: $error'),
          backgroundColor: Colors.red,
          behavior: SnackBarBehavior.floating,
        ),
      );
    });
  }

  // Method to build a material item card
  Widget _buildMaterialItem(MaterialItem material) {
    return Card(
      elevation: 1,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: () {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Downloading: ${material.title}'),
              behavior: SnackBarBehavior.floating,
            ),
          );
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Material icon
              Container(
                width: 56,
                height: 56,
                decoration: BoxDecoration(
                  color: _getMaterialColor(material.type).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Center(
                  child: Icon(
                    _getMaterialIcon(material.type),
                    size: 28,
                    color: _getMaterialColor(material.type),
                  ),
                ),
              ),
              const SizedBox(width: 16),

              // Material details
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      material.title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 6),
                    Text(
                      material.description,
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey[600],
                        height: 1.3,
                      ),
                      maxLines: 2,
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 8),

                    // Action buttons
                    Row(
                      children: [
                        _buildMaterialActionButton(
                          icon: Icons.visibility,
                          label: 'Xem',
                          color: Colors.blue,
                        ),
                        const SizedBox(width: 8),
                        _buildMaterialActionButton(
                          icon: Icons.download,
                          label: 'T·∫£i v·ªÅ',
                          color: Colors.green,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ l·∫•y icon ph√π h·ª£p cho b√†i h·ªçc d·ª±a v√†o lo·∫°i b√†i h·ªçc
  IconData _getLessonIcon(Lesson lesson) {
    return _controller.getLessonIcon(lesson);
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ t·∫°o widget ch·ªâ b√°o lo·∫°i n·ªôi dung (video, t√†i li·ªáu, b√†i ki·ªÉm tra)
  Widget _buildContentTypeIndicator(IconData icon, Color color) {
    return Padding(
      padding: const EdgeInsets.only(right: 4),
      child: Icon(
        icon,
        size: 12,
        color: color,
      ),
    );
  }

  // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ b√†i h·ªçc trong ph·∫ßn n·ªôi dung
  Widget _buildLessonDetailInfo(Lesson lesson) {
    return Container(
      padding: const EdgeInsets.all(8),
      margin: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.grey[300]!),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'N·ªôi dung b√†i h·ªçc:',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 14,
            ),
          ),
          const SizedBox(height: 8),

          // Th√¥ng tin v·ªÅ video
          if (lesson.videoUrl != null && lesson.videoUrl!.isNotEmpty)
            ListTile(
              leading: Container(
                width: 32,
                height: 32,
                decoration: BoxDecoration(
                  color: Colors.blue.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: const Icon(Icons.videocam, color: Colors.blue, size: 20),
              ),
              title:
                  const Text('Video b√†i gi·∫£ng', style: TextStyle(fontSize: 14)),
              dense: true,
              visualDensity: VisualDensity.compact,
              contentPadding: EdgeInsets.zero,
            ),

          // Th√¥ng tin v·ªÅ t√†i li·ªáu
          if (lesson.documentUrl != null && lesson.documentUrl!.isNotEmpty)
            ListTile(
              leading: Container(
                width: 32,
                height: 32,
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: const Icon(Icons.description,
                    color: Colors.green, size: 20),
              ),
              title: const Text('T√†i li·ªáu k√®m theo',
                  style: TextStyle(fontSize: 14)),
              dense: true,
              visualDensity: VisualDensity.compact,
              contentPadding: EdgeInsets.zero,
            ),

          // Th√¥ng tin v·ªÅ b√†i ki·ªÉm tra
          if (lesson.testType != null)
            ListTile(
              leading: Container(
                width: 32,
                height: 32,
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: const Icon(Icons.quiz, color: Colors.orange, size: 20),
              ),
              title: Text(
                  'B√†i ki·ªÉm tra ${lesson.testType == "Test B√†i" ? "b√†i h·ªçc" : "ch∆∞∆°ng"}',
                  style: const TextStyle(fontSize: 14)),
              dense: true,
              visualDensity: VisualDensity.compact,
              contentPadding: EdgeInsets.zero,
            ),
        ],
      ),
    );
  }
}
