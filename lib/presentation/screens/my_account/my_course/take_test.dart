import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:tms_app/data/models/my_course/test/content_test_model.dart';
import 'package:tms_app/domain/usecases/my_course/content_test_usecase.dart';

class TakeTestScreen extends StatefulWidget {
  final ContentTestModel contentTest;
  final ContentTestUseCase contentTestUseCase;
  final Function? onNextLesson; // Callback khi chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo
  final Function(double)?
      onTestCompleted; // Callback khi ho√†n th√†nh b√†i ki·ªÉm tra

  const TakeTestScreen({
    Key? key,
    required this.contentTest,
    required this.contentTestUseCase,
    this.onNextLesson,
    this.onTestCompleted,
  }) : super(key: key);

  @override
  State<TakeTestScreen> createState() => _TakeTestScreenState();
}

class _TakeTestScreenState extends State<TakeTestScreen> {
  // Th·ªùi gian c√≤n l·∫°i (t√≠nh b·∫±ng gi√¢y)
  late int _timeRemaining;
  Timer? _timer;

  // C√¢u h·ªèi hi·ªán t·∫°i
  int _currentQuestionIndex = 0;

  // Controller cho PageView
  late PageController _pageController;

  // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng
  late List<dynamic> _userAnswers;

  // Tr·∫°ng th√°i ƒë√£ n·ªôp b√†i
  bool _isSubmitted = false;

  // ƒêi·ªÉm s·ªë khi n·ªôp b√†i
  double _score = 0;

  @override
  void initState() {
    super.initState();
    // Kh·ªüi t·∫°o th·ªùi gian c√≤n l·∫°i t·ª´ ph√∫t sang gi√¢y
    _timeRemaining = widget.contentTest.duration;

    // Ki·ªÉm tra danh s√°ch c√¢u h·ªèi tr∆∞·ªõc khi kh·ªüi t·∫°o
    if (widget.contentTest.questionList.isEmpty) {
      _userAnswers = [];
      _isSubmitted = true; // ƒê√°nh d·∫•u l√† ƒë√£ n·ªôp b√†i ƒë·ªÉ tr√°nh timer
      _timer?.cancel(); // Ng·ª´ng ƒë·∫øm ng∆∞·ª£c ngay l·∫≠p t·ª©c
      return;
    }

    // Kh·ªüi t·∫°o danh s√°ch c√¢u tr·∫£ l·ªùi tr·ªëng
    _userAnswers =
        List<dynamic>.filled(widget.contentTest.questionList.length, null);

    // Kh·ªüi t·∫°o PageController v·ªõi c·∫•u h√¨nh c∆° b·∫£n
    _pageController = PageController(initialPage: 0);

    // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
    _startTimer();
  }

  @override
  void dispose() {
    _timer?.cancel();
    _pageController.dispose();
    super.dispose();
  }

  // H√†m b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
  void _startTimer() {
    // Kh√¥ng b·∫Øt ƒë·∫ßu timer n·∫øu danh s√°ch c√¢u h·ªèi tr·ªëng
    if (widget.contentTest.questionList.isEmpty) {
      return;
    }

    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {
      setState(() {
        if (_timeRemaining > 0) {
          _timeRemaining--;
        } else {
          _timer?.cancel();
          if (!_isSubmitted) {
            _submitTest();
          }
        }
      });
    });
  }

  // H√†m n·ªôp b√†i thi
  void _submitTest() {
    if (_isSubmitted) return;

    // Ki·ªÉm tra xem c√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi kh√¥ng
    final unansweredCount = _userAnswers.where((a) => a == null).length;

    if (unansweredCount > 0) {
      // T√¨m ch·ªâ s·ªë c·ªßa c√¢u h·ªèi ƒë·∫ßu ti√™n ch∆∞a ƒë∆∞·ª£c tr·∫£ l·ªùi
      int firstUnansweredIndex = _userAnswers.indexOf(null);

      // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n n·∫øu c√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          backgroundColor: Colors.white,
          elevation: 24,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          title: const Text(
            'X√°c nh·∫≠n n·ªôp b√†i',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.orange,
            ),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'C√≤n $unansweredCount c√¢u ch∆∞a ƒë∆∞·ª£c tr·∫£ l·ªùi.',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 8),
              const Text(
                'N·∫øu n·ªôp b√†i b√¢y gi·ªù, c√°c c√¢u ch∆∞a tr·∫£ l·ªùi s·∫Ω b·ªã t√≠nh l√† kh√¥ng c√≥ ƒëi·ªÉm.',
              ),
              const SizedBox(height: 16),
              const Text(
                'B·∫°n c√≥ mu·ªën:',
              ),
            ],
          ),
          actions: [
            // N√∫t quay l·∫°i c√¢u h·ªèi ch∆∞a l√†m ƒë·∫ßu ti√™n
            TextButton.icon(
              onPressed: () {
                Navigator.of(context).pop();
                // Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ƒë·∫ßu ti√™n ch∆∞a l√†m
                setState(() {
                  _currentQuestionIndex = firstUnansweredIndex;
                });
                _pageController.jumpToPage(firstUnansweredIndex);
              },
              icon: const Icon(Icons.arrow_back, size: 18),
              label: const Text('Quay l·∫°i l√†m ti·∫øp'),
              style: TextButton.styleFrom(foregroundColor: Colors.blue),
            ),

            // N√∫t n·ªôp b√†i ngay
            ElevatedButton.icon(
              onPressed: () {
                Navigator.of(context).pop();
                _finalizeSubmission();
              },
              icon: const Icon(Icons.check_circle, size: 18),
              label: const Text('N·ªôp b√†i ngay'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                elevation: 4,
              ),
            ),
          ],
        ),
      );
    } else {
      // N·∫øu ƒë√£ tr·∫£ l·ªùi h·∫øt, n·ªôp b√†i ngay
      _finalizeSubmission();
    }
  }

  // Ho√†n t·∫•t qu√° tr√¨nh n·ªôp b√†i sau khi ƒë√£ x√°c nh·∫≠n
  void _finalizeSubmission() {
    setState(() {
      _isSubmitted = true;
      _timer?.cancel();
      _calculateScore();
    });

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    _showResultDialog();
  }

  // T√≠nh ƒëi·ªÉm b√†i thi
  void _calculateScore() {
    double totalPoints = widget.contentTest.questionList.length.toDouble();
    double earnedPoints = 0;

    for (int i = 0; i < widget.contentTest.questionList.length; i++) {
      final question = widget.contentTest.questionList[i];
      final userAnswer = _userAnswers[i];

      if (userAnswer == null) continue;

      // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi d·ª±a v√†o lo·∫°i c√¢u h·ªèi
      try {
        switch (question.type) {
          case 'multiple-choice':
            if (widget.contentTestUseCase
                .checkMultipleChoiceAnswer(question, userAnswer)) {
              earnedPoints += 1;
            }
            break;

          case 'checkbox':
            if (userAnswer is String &&
                widget.contentTestUseCase
                    .checkCheckboxAnswer(question, userAnswer)) {
              earnedPoints += 1;
            }
            break;

          case 'fill-in-the-blank':
            if (userAnswer is String &&
                widget.contentTestUseCase
                    .checkFillInTheBlankAnswer(question, userAnswer)) {
              earnedPoints += 1;
            }
            break;

          case 'essay':
            // C√¢u t·ª± lu·∫≠n lu√¥n ƒë∆∞·ª£c t√≠nh l√† ƒë√∫ng n·∫øu c√≥ n·ªôi dung
            if (userAnswer is String && userAnswer.trim().isNotEmpty) {
              earnedPoints += 1;
            }
            break;
        }
      } catch (e) {
        // X·ª≠ l√Ω ngo·∫°i l·ªá khi ki·ªÉm tra ƒë√°p √°n
        debugPrint('L·ªói khi ki·ªÉm tra ƒë√°p √°n: $e');
      }
    }

    // T√≠nh ƒëi·ªÉm tr√™n thang ƒëi·ªÉm 10
    _score = earnedPoints / totalPoints * 10;
  }

  // Hi·ªÉn th·ªã dialog k·∫øt qu·∫£
  void _showResultDialog() {
    final bool isPassed = _score >= 7.0; // ƒêi·ªÉm ƒë·∫°t th∆∞·ªùng l√† 7.0/10
    final correctCount = _getCorrectAnswersCount();
    final totalQuestions = widget.contentTest.questionList.length;
    final correctPercentage = (correctCount / totalQuestions * 100).round();

    // G·ªçi callback khi ho√†n th√†nh b√†i ki·ªÉm tra
    if (widget.onTestCompleted != null) {
      debugPrint('üìä G·ªçi callback onTestCompleted v·ªõi ƒëi·ªÉm: $_score');
      widget.onTestCompleted!(_score);
    } else {
      debugPrint('‚ö†Ô∏è Callback onTestCompleted ch∆∞a ƒë∆∞·ª£c cung c·∫•p!');
    }

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        elevation: 24,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Row(
          children: [
            Icon(
              isPassed ? Icons.check_circle : Icons.error,
              color: isPassed ? Colors.green : Colors.orange,
            ),
            const SizedBox(width: 8),
            Text(
              isPassed ? 'Ho√†n th√†nh!' : 'Ch∆∞a ƒë·∫°t',
              style: TextStyle(
                color: isPassed ? Colors.green : Colors.orange,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
              Container(
                width: 100,
                height: 100,
                decoration: BoxDecoration(
                  color: isPassed
                      ? Colors.green.withOpacity(0.1)
                      : Colors.orange.withOpacity(0.1),
                  shape: BoxShape.circle,
                ),
                child: Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        '${_score.toStringAsFixed(1)}',
                        style: TextStyle(
                          fontSize: 30,
                          fontWeight: FontWeight.bold,
                          color: isPassed ? Colors.green : Colors.orange,
                        ),
                      ),
                      Text(
                        '/10',
                        style: TextStyle(
                          fontSize: 16,
                          color: isPassed ? Colors.green : Colors.orange,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),

              // Th√¥ng b√°o k·∫øt qu·∫£
              Text(
                isPassed
                    ? 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ v∆∞·ª£t qua b√†i ki·ªÉm tra.'
                    : 'B·∫°n ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra. H√£y xem l·∫°i b√†i h·ªçc v√† th·ª≠ l·∫°i.',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: isPassed ? Colors.green : Colors.orange,
                ),
              ),
              const SizedBox(height: 16),

              // Th√¥ng tin chi ti·∫øt
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[50],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    _buildResultItem(
                      icon: Icons.question_answer,
                      label: 'S·ªë c√¢u ƒë√∫ng:',
                      value:
                          '$correctCount/$totalQuestions ($correctPercentage%)',
                    ),
                    const Divider(),
                    _buildResultItem(
                      icon: Icons.timer,
                      label: 'Th·ªùi gian l√†m b√†i:',
                      value: _formatTimeUsed(),
                    ),
                    const Divider(),
                    _buildResultItem(
                      icon: Icons.psychology,
                      label: 'M·ª©c ƒë·ªô b√†i ki·ªÉm tra:',
                      value: widget.contentTest.isChapterTest
                          ? 'Ki·ªÉm tra ch∆∞∆°ng'
                          : (widget.contentTest.type.contains('essay')
                              ? 'T·ª± lu·∫≠n'
                              : 'Tr·∫Øc nghi·ªám'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          // N√∫t tr·ªü v·ªÅ b√†i h·ªçc hi·ªán t·∫°i
          TextButton(
            onPressed: () {
              Navigator.pop(context); // ƒê√≥ng dialog
              Navigator.pop(
                  context, _score); // Tr·ªü v·ªÅ m√†n h√¨nh tr∆∞·ªõc v·ªõi k·∫øt qu·∫£
            },
            child: const Text('Tr·ªü v·ªÅ b√†i h·ªçc'),
          ),

          // N√∫t xem chi ti·∫øt k·∫øt qu·∫£
          TextButton(
            onPressed: () {
              Navigator.pop(context); // ƒê√≥ng dialog
              // Hi·ªÉn th·ªã chi ti·∫øt b√†i l√†m
              _showDetailedResults();
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.blue,
            ),
            child: const Text('Xem chi ti·∫øt'),
          ),

          // N√∫t chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo - ch·ªâ hi·ªÉn th·ªã khi ƒë·∫°t ƒë·ªß ƒëi·ªÉm
          if (isPassed)
            ElevatedButton(
              onPressed: () {
                // G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo tr∆∞·ªõc
                _navigateToNextLesson();

                // Sau ƒë√≥ ƒë√≥ng dialog v√† tr·ªü v·ªÅ m√†n h√¨nh tr∆∞·ªõc
                Navigator.pop(context); // ƒê√≥ng dialog
                Navigator.pop(
                    context, _score); // Tr·ªü v·ªÅ m√†n h√¨nh tr∆∞·ªõc v·ªõi k·∫øt qu·∫£
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text('B√†i h·ªçc ti·∫øp theo'),
            ),
        ],
      ),
    );
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo
  void _navigateToNextLesson() {
    debugPrint('üîÑ _navigateToNextLesson ƒë∆∞·ª£c g·ªçi');

    // G·ªçi callback ƒë·ªÉ chuy·ªÉn ƒë·∫øn b√†i h·ªçc ti·∫øp theo n·∫øu ƒë∆∞·ª£c cung c·∫•p
    if (widget.onNextLesson != null) {
      debugPrint('‚úÖ G·ªçi callback onNextLesson');
      widget.onNextLesson!();
    } else {
      debugPrint('‚ùå Callback onNextLesson ch∆∞a ƒë∆∞·ª£c cung c·∫•p!');
    }
  }

  // Widget hi·ªÉn th·ªã m·ª•c th√¥ng tin trong b·∫£ng k·∫øt qu·∫£
  Widget _buildResultItem({
    required IconData icon,
    required String label,
    required String value,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Icon(icon, size: 18, color: Colors.grey[700]),
          const SizedBox(width: 8),
          Text(
            label,
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: Colors.grey[800],
            ),
          ),
          const Spacer(),
          Text(
            value,
            style: const TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  // ƒê·∫øm s·ªë c√¢u ƒë√∫ng
  int _getCorrectAnswersCount() {
    int count = 0;
    for (int i = 0; i < widget.contentTest.questionList.length; i++) {
      final question = widget.contentTest.questionList[i];
      final userAnswer = _userAnswers[i];

      if (userAnswer == null) continue;

      try {
        switch (question.type) {
          case 'multiple-choice':
            if (widget.contentTestUseCase
                .checkMultipleChoiceAnswer(question, userAnswer)) {
              count++;
            }
            break;

          case 'checkbox':
            if (userAnswer is String &&
                widget.contentTestUseCase
                    .checkCheckboxAnswer(question, userAnswer)) {
              count++;
            }
            break;

          case 'fill-in-the-blank':
            if (userAnswer is String &&
                widget.contentTestUseCase
                    .checkFillInTheBlankAnswer(question, userAnswer)) {
              count++;
            }
            break;

          case 'essay':
            // C√¢u t·ª± lu·∫≠n lu√¥n ƒë∆∞·ª£c t√≠nh l√† ƒë√∫ng n·∫øu c√≥ n·ªôi dung
            if (userAnswer is String && userAnswer.trim().isNotEmpty) {
              count++;
            }
            break;
        }
      } catch (e) {
        debugPrint('L·ªói khi ƒë·∫øm c√¢u ƒë√∫ng: $e');
      }
    }
    return count;
  }

  // Hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£
  void _showDetailedResults() {
    // Trong th·ª±c t·∫ø s·∫Ω ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m·ªôt m√†n h√¨nh kh√°c
    // Hi·ªÉn th·ªã danh s√°ch c√¢u h·ªèi v·ªõi c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng v√† ƒë√°p √°n ƒë√∫ng
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(16)),
      ),
      builder: (context) {
        return DraggableScrollableSheet(
          initialChildSize: 0.9,
          minChildSize: 0.5,
          maxChildSize: 0.95,
          expand: false,
          builder: (_, scrollController) {
            return Column(
              children: [
                // Ti√™u ƒë·ªÅ
                Container(
                  padding: const EdgeInsets.all(16),
                  child: Row(
                    children: [
                      const Text(
                        'Chi ti·∫øt k·∫øt qu·∫£',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 18,
                        ),
                      ),
                      const Spacer(),
                      IconButton(
                        icon: const Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                    ],
                  ),
                ),
                const Divider(height: 1),

                // Danh s√°ch c√¢u h·ªèi
                Expanded(
                  child: ListView.separated(
                    controller: scrollController,
                    itemCount: widget.contentTest.questionList.length,
                    separatorBuilder: (_, __) => const Divider(),
                    itemBuilder: (context, index) {
                      final question = widget.contentTest.questionList[index];
                      final userAnswer = _userAnswers[index];
                      bool isCorrect = false;

                      try {
                        switch (question.type) {
                          case 'multiple-choice':
                            isCorrect = widget.contentTestUseCase
                                .checkMultipleChoiceAnswer(
                                    question, userAnswer);
                            break;
                          case 'checkbox':
                            isCorrect = userAnswer is String &&
                                widget.contentTestUseCase
                                    .checkCheckboxAnswer(question, userAnswer);
                            break;
                          case 'fill-in-the-blank':
                            isCorrect = userAnswer is String &&
                                widget.contentTestUseCase
                                    .checkFillInTheBlankAnswer(
                                        question, userAnswer);
                            break;
                          case 'essay':
                            // T·ª± lu·∫≠n kh√¥ng ƒë√°nh gi√° ƒë√∫ng/sai
                            isCorrect = true;
                            break;
                        }
                      } catch (e) {
                        // X·ª≠ l√Ω ngo·∫°i l·ªá
                      }

                      return ListTile(
                        leading: CircleAvatar(
                          backgroundColor: userAnswer == null
                              ? Colors.grey
                              : (isCorrect ? Colors.green : Colors.red),
                          child: Icon(
                            userAnswer == null
                                ? Icons.question_mark
                                : (isCorrect ? Icons.check : Icons.close),
                            color: Colors.white,
                          ),
                        ),
                        title: Text(
                          'C√¢u ${index + 1}: ${question.content.length > 50 ? question.content.substring(0, 50) + '...' : question.content}',
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        subtitle: userAnswer == null
                            ? const Text('Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi',
                                style: TextStyle(color: Colors.grey))
                            : Text(
                                'C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n: $userAnswer',
                                style: TextStyle(
                                  color: isCorrect ? Colors.green : Colors.red,
                                ),
                              ),
                        trailing: Icon(
                          Icons.arrow_forward_ios,
                          size: 16,
                          color: Colors.grey[400],
                        ),
                        onTap: () {
                          // Hi·ªÉn th·ªã chi ti·∫øt c√¢u h·ªèi v√† ƒë√°p √°n
                          _showQuestionDetail(index);
                        },
                      );
                    },
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }

  // Hi·ªÉn th·ªã chi ti·∫øt c·ªßa m·ªôt c√¢u h·ªèi
  void _showQuestionDetail(int index) {
    final question = widget.contentTest.questionList[index];
    final userAnswer = _userAnswers[index];

    // ƒê·ªãnh d·∫°ng l·∫°i ƒë√°p √°n hi·ªÉn th·ªã d·ª±a v√†o lo·∫°i c√¢u h·ªèi
    String formattedUserAnswer = '';
    String formattedCorrectAnswer = '';

    if (question.type == 'checkbox') {
      // X·ª≠ l√Ω hi·ªÉn th·ªã ƒë√°p √°n cho c√¢u h·ªèi checkbox
      if (userAnswer != null) {
        final selectedOptions = (userAnswer as String)
            .split('-')
            .where((e) => e.isNotEmpty)
            .toList();
        formattedUserAnswer = selectedOptions.join(', ');
      } else {
        formattedUserAnswer = 'Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi';
      }

      // X·ª≠ l√Ω hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng
      if (question.resultCheck != null) {
        final correctOptions = question.resultCheck!
            .split(',')
            .where((e) => e.isNotEmpty)
            .toList();
        formattedCorrectAnswer = correctOptions.join(', ');
      } else {
        formattedCorrectAnswer = 'Kh√¥ng c√≥ ƒë√°p √°n';
      }
    } else {
      // C√°c lo·∫°i c√¢u h·ªèi kh√°c
      formattedUserAnswer = userAnswer?.toString() ?? 'Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi';
      formattedCorrectAnswer = question.result ?? 'Kh√¥ng c√≥ ƒë√°p √°n';
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        elevation: 24,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: Text(
          'C√¢u ${index + 1}',
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.blue,
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                question.content,
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              const Text('C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:'),
              const SizedBox(height: 4),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey[300]!),
                ),
                child: Text(formattedUserAnswer),
              ),
              const SizedBox(height: 16),
              const Text('ƒê√°p √°n ƒë√∫ng:'),
              const SizedBox(height: 4),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.green[300]!),
                ),
                child: Text(formattedCorrectAnswer),
              ),
              if (question.instruction != null &&
                  question.instruction!.isNotEmpty) ...[
                const SizedBox(height: 16),
                const Text('H∆∞·ªõng d·∫´n:'),
                const SizedBox(height: 4),
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue[300]!),
                  ),
                  child: Text(question.instruction!),
                ),
              ],
            ],
          ),
        ),
        actions: [
          ElevatedButton(
            onPressed: () => Navigator.pop(context),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
              elevation: 4,
            ),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  // ƒê·ªãnh d·∫°ng th·ªùi gian c√≤n l·∫°i
  String get _formattedTimeRemaining {
    final minutes = (_timeRemaining / 60).floor();
    final seconds = _timeRemaining % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  // Hi·ªÉn th·ªã t·ªïng th·ªùi gian b√†i ki·ªÉm tra theo ƒë·ªãnh d·∫°ng ph√π h·ª£p
  String get _formattedTotalTime {
    final minutes = (widget.contentTest.duration / 60).floor();
    final hours = (minutes / 60).floor();
    final remainingMinutes = minutes % 60;

    if (hours > 0) {
      return '${hours}:${remainingMinutes.toString().padLeft(2, '0')}';
    } else {
      return '${minutes}:00';
    }
  }

  // ƒê·ªãnh d·∫°ng th·ªùi gian ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ l√†m b√†i
  String _formatTimeUsed() {
    final totalSeconds = widget.contentTest.duration - _timeRemaining;
    final minutes = (totalSeconds / 60).floor();
    final hours = (minutes / 60).floor();
    final remainingMinutes = minutes % 60;
    final seconds = totalSeconds % 60;

    if (hours > 0) {
      return '${hours}:${remainingMinutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
    } else {
      return '${minutes}:${seconds.toString().padLeft(2, '0')}';
    }
  }

  // Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
  void _nextQuestion() {
    debugPrint(
        'üìå _nextQuestion ƒë∆∞·ª£c g·ªçi, ch·ªâ s·ªë hi·ªán t·∫°i: $_currentQuestionIndex');
    if (_currentQuestionIndex < widget.contentTest.questionList.length - 1) {
      setState(() {
        _currentQuestionIndex++;
      });

      // C·∫≠p nh·∫≠t PageView - t√°ch ra kh·ªèi setState ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ƒë√∫ng
      _pageController.jumpToPage(_currentQuestionIndex);

      debugPrint('üìå ƒê√£ chuy·ªÉn ƒë·∫øn c√¢u h·ªèi: $_currentQuestionIndex');
    }
  }

  // Tr·ªü v·ªÅ c√¢u h·ªèi tr∆∞·ªõc
  void _previousQuestion() {
    debugPrint(
        'üìå _previousQuestion ƒë∆∞·ª£c g·ªçi, ch·ªâ s·ªë hi·ªán t·∫°i: $_currentQuestionIndex');
    if (_currentQuestionIndex > 0) {
      setState(() {
        _currentQuestionIndex--;
      });

      // C·∫≠p nh·∫≠t PageView - t√°ch ra kh·ªèi setState ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ƒë√∫ng
      _pageController.jumpToPage(_currentQuestionIndex);

      debugPrint('üìå ƒê√£ chuy·ªÉn ƒë·∫øn c√¢u h·ªèi: $_currentQuestionIndex');
    }
  }

  // L∆∞u c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng
  void _saveAnswer(dynamic answer) {
    debugPrint('üíæ L∆∞u c√¢u tr·∫£ l·ªùi cho c√¢u $_currentQuestionIndex: $answer');

    // Ki·ªÉm tra n·∫øu gi√° tr·ªã kh√¥ng thay ƒë·ªïi th√¨ kh√¥ng c·∫ßn setState
    if (_userAnswers[_currentQuestionIndex] == answer) {
      return;
    }

    setState(() {
      _userAnswers[_currentQuestionIndex] = answer;
    });

    // Hi·ªÉn th·ªã s·ªë c√¢u ƒë√£ tr·∫£ l·ªùi ƒë·ªÉ debug
    int answeredCount = _userAnswers.where((a) => a != null).length;
    debugPrint(
        'üíæ T·ªïng s·ªë c√¢u ƒë√£ tr·∫£ l·ªùi: $answeredCount/${_userAnswers.length}');
  }

  // Hi·ªÉn th·ªã dialog x√°c nh·∫≠n tr∆∞·ªõc khi tho√°t
  Future<bool> _showExitConfirmation() async {
    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        elevation: 24,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        title: const Text(
          'X√°c nh·∫≠n tho√°t',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.red,
          ),
        ),
        content: const Text(
          'B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t? B√†i l√†m c·ªßa b·∫°n s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('·ªû l·∫°i'),
            style: TextButton.styleFrom(foregroundColor: Colors.blue),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
              elevation: 4,
            ),
            child: const Text('Tho√°t'),
          ),
        ],
      ),
    );
    return result ?? false;
  }

  @override
  Widget build(BuildContext context) {
    debugPrint(
        'üîÑ build ƒë∆∞·ª£c g·ªçi, ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i: $_currentQuestionIndex');

    // Ki·ªÉm tra danh s√°ch c√¢u h·ªèi tr·ªëng
    if (widget.contentTest.questionList.isEmpty) {
      // Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ c√¢u h·ªèi
      return Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 1,
          title: Text(
            widget.contentTest.testTitle,
            style: const TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          iconTheme: const IconThemeData(color: Colors.black),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(
                Icons.error_outline,
                size: 64,
                color: Colors.orange,
              ),
              const SizedBox(height: 16),
              const Text(
                'Kh√¥ng c√≥ c√¢u h·ªèi trong b√†i ki·ªÉm tra n√†y',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                'B√†i ki·ªÉm tra "${widget.contentTest.testTitle}" ch∆∞a c√≥ c√¢u h·ªèi n√†o.',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: () => Navigator.pop(context),
                icon: const Icon(Icons.arrow_back),
                label: const Text('Quay l·∫°i b√†i h·ªçc'),
                style: ElevatedButton.styleFrom(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                ),
              ),
            ],
          ),
        ),
      );
    }

    final currentQuestion =
        widget.contentTest.questionList[_currentQuestionIndex];
    debugPrint(
        'üîÑ Hi·ªÉn th·ªã c√¢u h·ªèi: ${currentQuestion.content.substring(0, min(30, currentQuestion.content.length))}...');

    return WillPopScope(
      onWillPop: () async {
        // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi tho√°t n·∫øu ch∆∞a n·ªôp b√†i
        if (!_isSubmitted) {
          return await _showExitConfirmation();
        }
        return true;
      },
      child: Scaffold(
        backgroundColor: Colors.white,
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 1,
          title: Text(
            widget.contentTest.testTitle,
            style: const TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          iconTheme: const IconThemeData(color: Colors.black),
          actions: [
            // Hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              margin: const EdgeInsets.only(right: 16, top: 8, bottom: 8),
              decoration: BoxDecoration(
                color: _timeRemaining < 60
                    ? Colors.red.withOpacity(0.1)
                    : Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.timer,
                    size: 18,
                    color: _timeRemaining < 60 ? Colors.red : Colors.blue,
                  ),
                  const SizedBox(width: 4),
                  Text(
                    _formattedTimeRemaining,
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: _timeRemaining < 60 ? Colors.red : Colors.blue,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        body: Column(
          children: [
            // Thanh ti·∫øn tr√¨nh c√¢u h·ªèi
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                children: [
                  // Th√¥ng tin c√¢u h·ªèi hi·ªán t·∫°i v√† ti·∫øn tr√¨nh
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // S·ªë c√¢u hi·ªán t·∫°i / t·ªïng s·ªë c√¢u
                      Text(
                        'C√¢u ${_currentQuestionIndex + 1}/${widget.contentTest.questionList.length}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      // Th√¥ng tin ƒë√£ tr·∫£ l·ªùi / ch∆∞a tr·∫£ l·ªùi
                      Row(
                        children: [
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.green.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(16),
                            ),
                            child: Text(
                              'ƒê√£ l√†m: ${_userAnswers.where((a) => a != null).length}',
                              style: const TextStyle(
                                color: Colors.green,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.orange.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(16),
                            ),
                            child: Text(
                              'Ch∆∞a l√†m: ${_userAnswers.where((a) => a == null).length}',
                              style: const TextStyle(
                                color: Colors.orange,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),

                  // Thanh ti·∫øn tr√¨nh
                  const SizedBox(height: 12),
                  ClipRRect(
                    borderRadius: BorderRadius.circular(4),
                    child: LinearProgressIndicator(
                      value: (_currentQuestionIndex + 1) /
                          widget.contentTest.questionList.length,
                      backgroundColor: Colors.grey[200],
                      color: Colors.orange,
                      minHeight: 6,
                    ),
                  ),
                ],
              ),
            ),

            // N·ªôi dung c√¢u h·ªèi
            Expanded(
              child: PageView.builder(
                controller: _pageController,
                physics: const NeverScrollableScrollPhysics(), // T·∫Øt vu·ªët ngang
                itemCount: widget.contentTest.questionList.length,
                onPageChanged: (index) {
                  debugPrint('üîÑ PageView onPageChanged: $index');
                  if (_currentQuestionIndex != index) {
                    setState(() {
                      _currentQuestionIndex = index;
                    });
                  }
                },
                itemBuilder: (context, index) {
                  final question = widget.contentTest.questionList[index];
                  return Container(
                    key: ValueKey('question_content_$index'),
                    color: Colors.white,
                    padding: const EdgeInsets.all(16),
                    child: SingleChildScrollView(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // N·ªôi dung c√¢u h·ªèi
                          _buildQuestionContent(question),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),

            // ƒêi·ªÅu h∆∞·ªõng
            Container(
              decoration: BoxDecoration(
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, -2),
                  ),
                ],
              ),
              padding: const EdgeInsets.all(16),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  // N√∫t quay l·∫°i - ch·ªâ hi·ªÉn th·ªã icon
                  Expanded(
                    flex: 2,
                    child: ElevatedButton(
                      onPressed:
                          _currentQuestionIndex > 0 ? _previousQuestion : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueGrey,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        disabledBackgroundColor: Colors.grey[200],
                        disabledForegroundColor: Colors.grey[400],
                      ),
                      child: const Icon(Icons.arrow_back, size: 24),
                    ),
                  ),
                  const SizedBox(width: 12),

                  // N√∫t n·ªôp b√†i - c·∫£i thi·ªán giao di·ªán
                  Expanded(
                    flex: 5,
                    child: ElevatedButton(
                      onPressed: _isSubmitted ? null : _submitTest,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          letterSpacing: 1.2,
                        ),
                        elevation: 2,
                        shadowColor: Colors.green.withOpacity(0.5),
                        disabledBackgroundColor: Colors.grey[300],
                      ),
                      child: const Text('N·ªòP B√ÄI'),
                    ),
                  ),

                  const SizedBox(width: 12),

                  // N√∫t c√¢u ti·∫øp theo - ch·ªâ hi·ªÉn th·ªã icon
                  Expanded(
                    flex: 2,
                    child: ElevatedButton(
                      onPressed: _currentQuestionIndex <
                              widget.contentTest.questionList.length - 1
                          ? _nextQuestion
                          : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        disabledBackgroundColor: Colors.grey[200],
                        disabledForegroundColor: Colors.grey[400],
                      ),
                      child: const Icon(Icons.arrow_forward, size: 24),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // X√¢y d·ª±ng n·ªôi dung c√¢u h·ªèi
  Widget _buildQuestionContent(QuestionModel question) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Ti√™u ƒë·ªÅ c√¢u h·ªèi
        Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // S·ªë th·ª© t·ª± c√¢u h·ªèi
            Container(
              width: 36,
              height: 36,
              decoration: BoxDecoration(
                color: _userAnswers[_currentQuestionIndex] != null
                    ? Colors.green
                    : Colors.orange,
                borderRadius: BorderRadius.circular(18),
              ),
              child: Center(
                child: Text(
                  '${_currentQuestionIndex + 1}',
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            // N·ªôi dung c√¢u h·ªèi
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    question.content,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  // Lo·∫°i c√¢u h·ªèi v√† ƒë·ªô kh√≥
                  Row(
                    children: [
                      _buildQuestionTypeChip(question.type),
                      const SizedBox(width: 8),
                      Container(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 8, vertical: 2),
                        decoration: BoxDecoration(
                          color: _getDifficultyColor(question.level)
                              .withOpacity(0.1),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          'M·ª©c ƒë·ªô: ${_getLevelText(question.level)}',
                          style: TextStyle(
                            fontSize: 12,
                            color: _getDifficultyColor(question.level),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  if (question.instruction != null &&
                      question.instruction!.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 16.0),
                      child: Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.amber.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                          border:
                              Border.all(color: Colors.amber.withOpacity(0.5)),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                const Icon(
                                  Icons.lightbulb,
                                  color: Colors.amber,
                                  size: 18,
                                ),
                                const SizedBox(width: 8),
                                const Text(
                                  'H∆∞·ªõng d·∫´n:',
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.amber,
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 8),
                            Text(
                              question.instruction!,
                              style: const TextStyle(
                                fontSize: 14,
                                height: 1.4,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ],
        ),

        const SizedBox(height: 24),

        // Ph·∫ßn c√¢u tr·∫£ l·ªùi t√πy theo lo·∫°i c√¢u h·ªèi
        switch (question.type) {
          'multiple-choice' => _buildMultipleChoiceQuestion(question),
          'checkbox' => _buildCheckboxQuestion(question),
          'fill-in-the-blank' => _buildFillBlankQuestion(question),
          'essay' => _buildEssayQuestion(question),
          _ => const Text('Lo·∫°i c√¢u h·ªèi kh√¥ng h·ªó tr·ª£'),
        },
      ],
    );
  }

  // Widget hi·ªÉn th·ªã lo·∫°i c√¢u h·ªèi
  Widget _buildQuestionTypeChip(String type) {
    IconData icon;
    String label;
    Color color;

    switch (type) {
      case 'multiple-choice':
        icon = Icons.radio_button_checked;
        label = 'Tr·∫Øc nghi·ªám';
        color = Colors.blue;
        break;
      case 'checkbox':
        icon = Icons.check_box;
        label = 'Nhi·ªÅu ƒë√°p √°n';
        color = Colors.purple;
        break;
      case 'fill-in-the-blank':
        icon = Icons.text_fields;
        label = 'ƒêi·ªÅn khuy·∫øt';
        color = Colors.teal;
        break;
      case 'essay':
        icon = Icons.edit_note;
        label = 'T·ª± lu·∫≠n';
        color = Colors.deepOrange;
        break;
      default:
        icon = Icons.help;
        label = 'Kh√¥ng x√°c ƒë·ªãnh';
        color = Colors.grey;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 12, color: color),
          const SizedBox(width: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: color,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  // L·∫•y m√†u d·ª±a tr√™n ƒë·ªô kh√≥
  Color _getDifficultyColor(String level) {
    switch (level) {
      case '1':
        return Colors.green;
      case '2':
        return Colors.orange;
      case '3':
        return Colors.red;
      default:
        return Colors.blue;
    }
  }

  // Chuy·ªÉn ƒë·ªïi c·∫•p ƒë·ªô t·ª´ s·ªë sang text
  String _getLevelText(String level) {
    switch (level) {
      case '1':
        return 'D·ªÖ';
      case '2':
        return 'Trung b√¨nh';
      case '3':
        return 'Kh√≥';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  }

  // X√¢y d·ª±ng c√¢u h·ªèi tr·∫Øc nghi·ªám (ch·ªçn 1 ƒë√°p √°n)
  Widget _buildMultipleChoiceQuestion(QuestionModel question) {
    final options = [
      if (question.optionA != null) question.optionA!,
      if (question.optionB != null) question.optionB!,
      if (question.optionC != null) question.optionC!,
      if (question.optionD != null) question.optionD!,
    ];
    final optionLabels = ['A', 'B', 'C', 'D'];
    final currentAnswer = _userAnswers[_currentQuestionIndex] as String?;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Row(
          children: [
            Icon(Icons.radio_button_checked, size: 16, color: Colors.blue),
            SizedBox(width: 8),
            Text(
              'Ch·ªçn m·ªôt ƒë√°p √°n ƒë√∫ng:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ...List.generate(options.length, (index) {
          final optionValue = optionLabels[index];
          final optionText = options[index];

          return Container(
            margin: const EdgeInsets.only(bottom: 12),
            child: RadioListTile<String>(
              value: optionValue,
              groupValue: currentAnswer,
              title: Text('$optionValue. $optionText'),
              onChanged: _isSubmitted
                  ? null
                  : (value) {
                      _saveAnswer(value);
                    },
              activeColor: Colors.orange,
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
                side: BorderSide(
                  color: currentAnswer == optionValue
                      ? Colors.orange
                      : Colors.grey[300]!,
                  width: currentAnswer == optionValue ? 2 : 1,
                ),
              ),
              tileColor: currentAnswer == optionValue
                  ? Colors.orange.withOpacity(0.1)
                  : Colors.grey[50],
              dense: false,
              controlAffinity: ListTileControlAffinity.leading,
            ),
          );
        }),
      ],
    );
  }

  // X√¢y d·ª±ng c√¢u h·ªèi checkbox (ch·ªçn nhi·ªÅu ƒë√°p √°n)
  Widget _buildCheckboxQuestion(QuestionModel question) {
    final options = [
      if (question.optionA != null) question.optionA!,
      if (question.optionB != null) question.optionB!,
      if (question.optionC != null) question.optionC!,
      if (question.optionD != null) question.optionD!,
    ];
    final optionLabels = ['1', '2', '3', '4'];
    final currentAnswer = _userAnswers[_currentQuestionIndex] as String? ?? '';
    final selectedOptions =
        currentAnswer.split('-').where((e) => e.isNotEmpty).toList();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Row(
          children: [
            Icon(Icons.check_box, size: 16, color: Colors.purple),
            SizedBox(width: 8),
            Text(
              'Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ƒë√°p √°n ƒë√∫ng:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ...List.generate(options.length, (index) {
          final optionValue = optionLabels[index];
          final optionText = options[index];
          final isSelected = selectedOptions.contains(optionValue);

          return Container(
            margin: const EdgeInsets.only(bottom: 12),
            child: CheckboxListTile(
              value: isSelected,
              title: Text('$optionValue. $optionText'),
              onChanged: _isSubmitted
                  ? null
                  : (bool? checked) {
                      List<String> newSelectedOptions =
                          List.from(selectedOptions);

                      if (checked == true) {
                        if (!newSelectedOptions.contains(optionValue)) {
                          newSelectedOptions.add(optionValue);
                        }
                      } else {
                        newSelectedOptions.remove(optionValue);
                      }

                      // S·∫Øp x·∫øp c√°c l·ª±a ch·ªçn theo th·ª© t·ª± v√† t·∫°o chu·ªói ƒë·ªãnh d·∫°ng "1-2-3-4"
                      newSelectedOptions.sort();
                      _saveAnswer(newSelectedOptions.join('-'));
                    },
              activeColor: Colors.purple,
              checkColor: Colors.white,
              contentPadding:
                  const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
                side: BorderSide(
                  color: isSelected ? Colors.purple : Colors.grey[300]!,
                  width: isSelected ? 2 : 1,
                ),
              ),
              tileColor:
                  isSelected ? Colors.purple.withOpacity(0.1) : Colors.grey[50],
              dense: false,
              controlAffinity: ListTileControlAffinity.leading,
            ),
          );
        }),
      ],
    );
  }

  // X√¢y d·ª±ng c√¢u h·ªèi ƒëi·ªÅn khuy·∫øt
  Widget _buildFillBlankQuestion(QuestionModel question) {
    final currentAnswer = _userAnswers[_currentQuestionIndex] as String? ?? '';
    final TextEditingController textController =
        TextEditingController(text: currentAnswer);

    // ƒê·∫£m b·∫£o v·ªã tr√≠ con tr·ªè ·ªü cu·ªëi vƒÉn b·∫£n
    textController.selection = TextSelection.fromPosition(
      TextPosition(offset: textController.text.length),
    );

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Row(
          children: [
            Icon(Icons.text_fields, size: 16, color: Colors.teal),
            SizedBox(width: 8),
            Text(
              'ƒêi·ªÅn v√†o √¥ tr·ªëng:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Hi·ªÉn th·ªã c√¢u h·ªèi v·ªõi ƒë·ªãnh d·∫°ng r√µ r√†ng h∆°n
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.teal.withOpacity(0.05),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.teal.withOpacity(0.3)),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Ho√†n th√†nh c√¢u sau:',
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 8),
              Text(
                question.content,
                style: const TextStyle(
                  fontSize: 16,
                  fontStyle: FontStyle.italic,
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 16),
        TextField(
          controller: textController,
          decoration: InputDecoration(
            hintText: 'Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n...',
            labelText: 'C√¢u tr·∫£ l·ªùi',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Colors.teal, width: 2),
            ),
            filled: true,
            fillColor: Colors.grey[50],
            prefixIcon: const Icon(Icons.edit, color: Colors.teal),
          ),
          maxLines: 1,
          enabled: !_isSubmitted,
          onChanged: (value) {
            _saveAnswer(value);
          },
          textInputAction: TextInputAction.done,
          textAlign: TextAlign.left,
          style: const TextStyle(fontSize: 16),
        ),
        const SizedBox(height: 12),
        const Text(
          'L∆∞u √Ω: Nh·∫≠p ch√≠nh x√°c c√∫ ph√°p, ch√∫ √Ω c√°c k√Ω t·ª± vi·∫øt hoa/th∆∞·ªùng v√† d·∫•u c√°ch.',
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey,
            fontStyle: FontStyle.italic,
          ),
        ),

        // Hi·ªÉn th·ªã g·ª£i √Ω n·∫øu c√≥
        if (question.instruction != null && question.instruction!.isNotEmpty)
          Container(
            margin: const EdgeInsets.only(top: 16),
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.amber.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.amber.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                const Icon(Icons.lightbulb_outline,
                    color: Colors.amber, size: 18),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    question.instruction!,
                    style: const TextStyle(
                      fontStyle: FontStyle.italic,
                      fontSize: 13,
                    ),
                  ),
                ),
              ],
            ),
          ),
      ],
    );
  }

  // X√¢y d·ª±ng c√¢u h·ªèi t·ª± lu·∫≠n
  Widget _buildEssayQuestion(QuestionModel question) {
    final currentAnswer = _userAnswers[_currentQuestionIndex] as String? ?? '';

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Row(
          children: [
            Icon(Icons.edit_note, size: 16, color: Colors.deepOrange),
            SizedBox(width: 8),
            Text(
              'Tr·∫£ l·ªùi c√¢u h·ªèi:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 14,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        TextField(
          controller: TextEditingController(text: currentAnswer),
          decoration: InputDecoration(
            hintText: 'Nh·∫≠p c√¢u tr·∫£ l·ªùi chi ti·∫øt c·ªßa b·∫°n...',
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: Colors.grey[300]!),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: const BorderSide(color: Colors.deepOrange, width: 2),
            ),
            filled: true,
            fillColor: Colors.grey[50],
          ),
          maxLines: 8,
          minLines: 5,
          enabled: !_isSubmitted,
          onChanged: (value) {
            _saveAnswer(value);
          },
          textInputAction: TextInputAction.newline,
        ),
        const SizedBox(height: 12),
        const Text(
          'G·ª£i √Ω: Vi·∫øt chi ti·∫øt, ƒë·∫ßy ƒë·ªß v√† cung c·∫•p v√≠ d·ª• minh h·ªça n·∫øu c√≥ th·ªÉ.',
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey,
            fontStyle: FontStyle.italic,
          ),
        ),
        if (currentAnswer.isNotEmpty)
          Padding(
            padding: const EdgeInsets.only(top: 8.0),
            child: Text(
              'ƒê·ªô d√†i: ${currentAnswer.length} k√Ω t·ª±',
              style: TextStyle(
                fontSize: 12,
                color: currentAnswer.length < 20 ? Colors.red : Colors.green,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
      ],
    );
  }
}
