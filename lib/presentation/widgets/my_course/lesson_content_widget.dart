import 'package:flutter/material.dart';
import 'package:tms_app/presentation/screens/my_account/my_course/enroll_course.dart';
import 'package:tms_app/presentation/widgets/my_course/comment_item_widget.dart';
import 'package:tms_app/presentation/widgets/my_course/complete_lesson_button.dart';
import 'package:tms_app/presentation/widgets/my_course/lesson_materials_widget.dart';
import 'package:tms_app/presentation/widgets/my_course/lesson_summary_widget.dart';
import 'package:video_player/video_player.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:chewie/chewie.dart';
import 'package:tms_app/core/services/video_player_service.dart';
import 'package:get_it/get_it.dart';
import 'package:tms_app/presentation/controller/my_course/course_progress_controller.dart';
import 'package:tms_app/core/auth/auth_manager.dart';
import 'package:tms_app/core/utils/shared_prefs.dart';
import 'package:tms_app/data/services/my_course/course_progress_service.dart';
// import 'package:tms_app/data/repositories/course_progress_repository.dart';
import 'package:dio/dio.dart';
import 'package:tms_app/core/utils/constants.dart';
import 'package:tms_app/domain/repositories/my_course/course_progress_repository.dart';

class LessonContentWidget extends StatefulWidget {
  final CourseChapter currentChapter;
  final Lesson currentLesson;
  final Map<String, bool> completedLessons;
  final TabController tabController;
  final String summary;
  final String? videoUrl;
  final List<MaterialItem> materials;
  final Function(String) onCommentSubmit;
  final VoidCallback onCompleteLesson;
  final VoidCallback onPreviousLesson;
  final VoidCallback onNextLesson;
  final bool canNavigateToPrevious;
  final bool canNavigateToNext;
  final Function() showTestResults;
  final Function() startTest;
  final Function(String) openVideoInExternalPlayer;

  // Function to build lesson detail info
  final Widget Function(Lesson lesson)? buildLessonDetailInfo;

  const LessonContentWidget({
    Key? key,
    required this.currentChapter,
    required this.currentLesson,
    required this.completedLessons,
    required this.tabController,
    required this.summary,
    required this.videoUrl,
    required this.materials,
    required this.onCommentSubmit,
    required this.onCompleteLesson,
    required this.onPreviousLesson,
    required this.onNextLesson,
    required this.canNavigateToPrevious,
    required this.canNavigateToNext,
    required this.showTestResults,
    required this.startTest,
    required this.openVideoInExternalPlayer,
    this.buildLessonDetailInfo,
  }) : super(key: key);

  @override
  State<LessonContentWidget> createState() => _LessonContentWidgetState();
}

class _LessonContentWidgetState extends State<LessonContentWidget> {
  // Controller cho video player
  VideoPlayerController? _videoPlayerController;
  ChewieController? _chewieController;
  bool _isVideoInitialized = false;
  bool _isPlaying = false;
  bool _isFullScreen = false;

  @override
  void initState() {
    super.initState();
    // Kh·ªüi t·∫°o video player n·∫øu c√≥ URL video
    if (widget.videoUrl != null && widget.videoUrl!.isNotEmpty) {
      // T·ª± ƒë·ªông kh·ªüi t·∫°o video ngay l·∫≠p t·ª©c kh√¥ng c·∫ßn delay
      _initializeVideoPlayer();
    }
  }

  @override
  void didUpdateWidget(LessonContentWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    // Kh·ªüi t·∫°o l·∫°i video player n·∫øu URL video thay ƒë·ªïi
    if (widget.videoUrl != oldWidget.videoUrl) {
      _disposeVideoPlayer();
      if (widget.videoUrl != null && widget.videoUrl!.isNotEmpty) {
        _initializeVideoPlayer();
      }
    }

    // Th√™m log ƒë·ªÉ ki·ªÉm tra khi n√†o widget ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† d·ªØ li·ªáu hi·ªán t·∫°i
    print('üì± didUpdateWidget ƒë∆∞·ª£c g·ªçi trong LessonContentWidget');
    print('   - Ch∆∞∆°ng hi·ªán t·∫°i: ${widget.currentChapter.title}');
    print('   - B√†i h·ªçc hi·ªán t·∫°i: ${widget.currentLesson.title}');
    print('   - C√≥ th·ªÉ chuy·ªÉn b√†i ti·∫øp: ${widget.canNavigateToNext}');
    print(
        '   - ƒê√£ ho√†n th√†nh: ${widget.completedLessons[widget.currentLesson.id] == true}');

    // In ra to√†n b·ªô danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh
    print('   - Danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh:');
    widget.completedLessons.forEach((key, value) {
      print('     + B√†i h·ªçc ID: $key, Ho√†n th√†nh: $value');
    });
  }

  // Kh·ªüi t·∫°o video player
  Future<void> _initializeVideoPlayer() async {
    try {
      setState(() {
        _isVideoInitialized = false;
      });

      // X·ª≠ l√Ω URL qua service
      String cleanUrl = VideoPlayerService.processVideoUrl(widget.videoUrl!);

      // S·ª≠ d·ª•ng service ƒë·ªÉ t·∫°o ChewieController
      _chewieController = await VideoPlayerService.initializeChewieController(
        videoUrl: cleanUrl,
        autoPlay: false, // Thay ƒë·ªïi: kh√¥ng t·ª± ƒë·ªông ph√°t khi t·∫£i xong
        looping: false,
        allowFullScreen: true,
        allowMuting: true,
        showControls: true,
      );

      // L·∫•y v√† thi·∫øt l·∫≠p controller t·ª´ Chewie
      if (_chewieController != null) {
        _videoPlayerController = _chewieController!.videoPlayerController;

        // L·∫Øng nghe s·ª± ki·ªán k·∫øt th√∫c video ƒë·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc
        _videoPlayerController!.addListener(_videoPlayerListener);

        // C·∫≠p nh·∫≠t UI
        if (mounted) {
          setState(() {
            _isVideoInitialized = true;
            _isPlaying = false; // Thay ƒë·ªïi: c·∫≠p nh·∫≠t tr·∫°ng th√°i l√† kh√¥ng ph√°t
          });
        }
      } else {
        throw Exception("Kh√¥ng th·ªÉ t·∫°o Chewie Controller");
      }
    } catch (e) {
      print("L·ªói khi kh·ªüi t·∫°o video player: $e");
      if (mounted) {
        setState(() {});
      }
    }
  }

  void _videoPlayerListener() {
    // Ki·ªÉm tra n·∫øu video ƒë√£ k·∫øt th√∫c
    if (_videoPlayerController != null &&
        _videoPlayerController!.value.isInitialized &&
        _videoPlayerController!.value.position >=
            _videoPlayerController!.value.duration) {
      // Video ƒë√£ k·∫øt th√∫c, ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc
      if (mounted && widget.completedLessons[widget.currentLesson.id] != true) {
        print("üèÅ Video ƒë√£ k·∫øt th√∫c, ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc");
        widget.onCompleteLesson(); // ƒê√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc
      }
    }
  }

  // Gi·∫£i ph√≥ng controller khi widget b·ªã h·ªßy
  void _disposeVideoPlayer() {
    try {
      if (_chewieController != null) {
        _chewieController!.dispose();
        _chewieController = null;
      }

      if (_videoPlayerController != null) {
        _videoPlayerController!.removeListener(_videoPlayerListener);
        _videoPlayerController!.dispose();
        _videoPlayerController = null;
      }

      _isVideoInitialized = false;
      _isPlaying = false;
    } catch (e) {
      print('L·ªói khi dispose video controller: $e');
    }
  }

  @override
  void dispose() {
    _disposeVideoPlayer();
    super.dispose();
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i play/pause
  void _togglePlayPause() {
    if (_videoPlayerController == null || !_isVideoInitialized) return;

    setState(() {
      if (_videoPlayerController!.value.isPlaying) {
        _videoPlayerController!.pause();
        _isPlaying = false;
      } else {
        _videoPlayerController!.play();
        _isPlaying = true;
      }
    });
  }

  // Ph∆∞∆°ng th·ª©c ƒë·ªÉ chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
  void _toggleFullScreen() {
    if (_chewieController == null) return;

    _chewieController!.toggleFullScreen();
    setState(() {
      _isFullScreen = !_isFullScreen;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Th√™m log ƒë·ªÉ ki·ªÉm tra khi widget build ƒë∆∞·ª£c g·ªçi
    print('üì± build ƒë∆∞·ª£c g·ªçi trong LessonContentWidget');
    print('   - Ch∆∞∆°ng hi·ªán t·∫°i: ${widget.currentChapter.title}');
    print('   - B√†i h·ªçc hi·ªán t·∫°i: ${widget.currentLesson.title}');
    print('   - C√≥ th·ªÉ chuy·ªÉn b√†i ti·∫øp: ${widget.canNavigateToNext}');
    print(
        '   - ƒê√£ ho√†n th√†nh: ${widget.completedLessons[widget.currentLesson.id] == true}');
    print('   - ID b√†i h·ªçc hi·ªán t·∫°i: ${widget.currentLesson.id}');

    // Ki·ªÉm tra xem ID b√†i h·ªçc c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
    final lessonId = widget.currentLesson.id;
    print('   - Ki·ªÉu d·ªØ li·ªáu c·ªßa lessonId: ${lessonId.runtimeType}');

    // Ki·ªÉm tra completedLessons c√≥ ch·ª©a lessonId kh√¥ng
    print(
        '   - completedLessons c√≥ ch·ª©a lessonId kh√¥ng: ${widget.completedLessons.containsKey(lessonId)}');

    // In ra to√†n b·ªô danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh
    print('   - Danh s√°ch b√†i h·ªçc ƒë√£ ho√†n th√†nh:');
    widget.completedLessons.forEach((key, value) {
      print('     + B√†i h·ªçc ID: $key, Ho√†n th√†nh: $value');
    });

    // Check for dark mode
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return DefaultTabController(
      length: 3,
      child: Column(
        children: [
          // Ti√™u ƒë·ªÅ b√†i h·ªçc
          if (!_isFullScreen)
            Container(
              padding: const EdgeInsets.only(
                  left: 16, right: 16, top: 16, bottom: 8),
              decoration: BoxDecoration(
                color: isDarkMode ? Colors.black : Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: isDarkMode 
                        ? Colors.black.withOpacity(0.2) 
                        : Colors.black.withOpacity(0.05),
                    offset: const Offset(0, 2),
                    blurRadius: 4,
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Row ch·ª©a ti√™u ƒë·ªÅ v√† n√∫t ƒëi·ªÅu h∆∞·ªõng
                  Row(
                    children: [
                      // N√∫t b√†i tr∆∞·ªõc
                      IconButton(
                        onPressed: widget.canNavigateToPrevious
                            ? widget.onPreviousLesson
                            : null,
                        icon: const Icon(Icons.arrow_back_ios, size: 16),
                        tooltip: 'B√†i tr∆∞·ªõc',
                        constraints: const BoxConstraints(),
                        padding: const EdgeInsets.all(8),
                        style: IconButton.styleFrom(
                          backgroundColor: isDarkMode 
                              ? Color(0xFF252525) 
                              : Colors.grey[100],
                          foregroundColor: isDarkMode 
                              ? Colors.white 
                              : Colors.grey[800],
                          disabledBackgroundColor: isDarkMode 
                              ? Color(0xFF1A1A1A) 
                              : Colors.grey[100],
                          disabledForegroundColor: isDarkMode 
                              ? Colors.grey[700] 
                              : Colors.grey[400],
                        ),
                      ),

                      const SizedBox(width: 8),

                      // Ti√™u ƒë·ªÅ b√†i h·ªçc v√† ch∆∞∆°ng
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Ch∆∞∆°ng
                            Row(
                              children: [
                                Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 6, vertical: 2),
                                  decoration: BoxDecoration(
                                    color: Colors.orange.withOpacity(0.1),
                                    borderRadius: BorderRadius.circular(4),
                                  ),
                                  child: Text(
                                    'Ch∆∞∆°ng ${widget.currentChapter.id}',
                                    style: const TextStyle(
                                      fontSize: 12,
                                      fontWeight: FontWeight.w500,
                                      color: Colors.orange,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                Expanded(
                                  child: Text(
                                    widget.currentChapter.title
                                                .split(':')
                                                .length >
                                            1
                                        ? widget.currentChapter.title
                                            .split(':')[1]
                                            .trim()
                                        : widget.currentChapter.title,
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: isDarkMode 
                                          ? Colors.grey[400] 
                                          : Colors.grey[700],
                                      fontWeight: FontWeight.w500,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ),
                              ],
                            ),

                            const SizedBox(height: 4),

                            // T√™n b√†i h·ªçc
                            Text(
                              widget.currentLesson.title,
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                color: isDarkMode ? Colors.white : Colors.black,
                              ),
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(width: 8),

                      // N√∫t b√†i ti·∫øp
                      IconButton(
                        onPressed: () {
                          print("üì± Nh·∫•n n√∫t b√†i ti·∫øp ·ªü header");
                          if (widget.canNavigateToNext) {
                            widget.onNextLesson();
                          }
                        },
                        icon: const Icon(Icons.arrow_forward_ios, size: 16),
                        tooltip: 'B√†i ti·∫øp',
                        constraints: const BoxConstraints(),
                        padding: const EdgeInsets.all(8),
                        style: IconButton.styleFrom(
                          backgroundColor: widget.canNavigateToNext
                              ? Colors.orange
                              : isDarkMode 
                                  ? Color(0xFF252525) 
                                  : Colors.grey[300],
                          foregroundColor: Colors.white,
                          disabledBackgroundColor: isDarkMode 
                              ? Color(0xFF1A1A1A) 
                              : Colors.grey[300],
                          disabledForegroundColor: isDarkMode 
                              ? Colors.grey[700] 
                              : Colors.grey[400],
                        ),
                      ),
                    ],
                  ),

                  // Th·ªùi l∆∞·ª£ng v√† th√¥ng tin kh√°c
                  Padding(
                    padding: const EdgeInsets.only(top: 8, bottom: 4, left: 2),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // Th√¥ng tin b√†i h·ªçc
                        Row(
                          children: [
                            Icon(
                              widget.currentLesson.type == LessonType.video
                                  ? Icons.videocam
                                  : Icons.assignment,
                              size: 14,
                              color: isDarkMode 
                                  ? Colors.grey[400] 
                                  : Colors.grey[700],
                            ),
                            const SizedBox(width: 4),
                            Text(
                              widget.currentLesson.duration,
                              style: TextStyle(
                                fontSize: 12,
                                color: isDarkMode 
                                    ? Colors.grey[400] 
                                    : Colors.grey[700],
                              ),
                            ),
                          ],
                        ),

                        // Tr·∫°ng th√°i b√†i h·ªçc
                        Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: widget.completedLessons[
                                        widget.currentLesson.id] ==
                                    true
                                ? Colors.green.withOpacity(0.1)
                                : isDarkMode 
                                    ? Color(0xFF252525) 
                                    : Colors.grey[100],
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                widget.completedLessons[
                                            widget.currentLesson.id] ==
                                        true
                                    ? Icons.check_circle
                                    : Icons.circle_outlined,
                                size: 12,
                                color: widget.completedLessons[
                                            widget.currentLesson.id] ==
                                        true
                                    ? Colors.green
                                    : isDarkMode 
                                        ? Colors.grey[500] 
                                        : Colors.grey[700],
                              ),
                              const SizedBox(width: 4),
                              Text(
                                widget.completedLessons[
                                            widget.currentLesson.id] ==
                                        true
                                    ? 'ƒê√£ ho√†n th√†nh'
                                    : 'Ch∆∞a ho√†n th√†nh',
                                style: TextStyle(
                                  fontSize: 11,
                                  color: widget.completedLessons[
                                              widget.currentLesson.id] ==
                                          true
                                      ? Colors.green
                                      : isDarkMode 
                                          ? Colors.grey[500] 
                                          : Colors.grey[700],
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

          // TabBar cho n·ªôi dung b√†i h·ªçc - ch·ªâ hi·ªÉn th·ªã khi kh√¥ng ·ªü ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
          if (!_isFullScreen)
            SizedBox(
              height: 56,
              child: Material(
                color: isDarkMode ? Colors.black : Colors.white,
                child: TabBar(
                  controller: widget.tabController,
                  labelColor: Colors.orange,
                  unselectedLabelColor: isDarkMode ? Colors.grey[400] : Colors.grey[600],
                  indicatorColor: Colors.orange,
                  indicatorWeight: 3,
                  dividerHeight: 1,
                  dividerColor: isDarkMode ? Color(0xFF3A3F55) : Colors.grey[300],
                  labelStyle: const TextStyle(
                      fontWeight: FontWeight.bold, fontSize: 14),
                  unselectedLabelStyle: const TextStyle(fontSize: 14),
                  tabs: const [
                    Tab(
                      icon: Icon(Icons.play_circle_filled),
                      text: 'Video',
                      iconMargin: EdgeInsets.only(bottom: 4),
                    ),
                    Tab(
                      icon: Icon(Icons.menu_book),
                      text: 'T√†i li·ªáu',
                      iconMargin: EdgeInsets.only(bottom: 4),
                    ),
                    Tab(
                      icon: Icon(Icons.summarize),
                      text: 'T√≥m t·∫Øt',
                      iconMargin: EdgeInsets.only(bottom: 4),
                    ),
                  ],
                ),
              ),
            ),

          // N·ªôi dung b√†i h·ªçc v·ªõi TabBarView
          Expanded(
            child: _isFullScreen
                ? _buildVideoPlayer(isFullScreen: true)
                : TabBarView(
                    controller: widget.tabController,
                    children: [
                      // Tab 1: Video ho·∫∑c B√†i ki·ªÉm tra
                      SingleChildScrollView(
                        padding: const EdgeInsets.all(0),
                        child: widget.currentLesson.type == LessonType.video
                            ? _buildVideoLessonContent(context)
                            : _buildTestLessonContent(context),
                      ),

                      // Tab 2: T√†i li·ªáu
                      SingleChildScrollView(
                        padding: const EdgeInsets.all(20),
                        child: LessonMaterialsWidget(
                          materials: widget.materials,
                          lessonTitle: widget.currentLesson.title,
                        ),
                      ),

                      // Tab 3: T√≥m t·∫Øt
                      SingleChildScrollView(
                        padding: const EdgeInsets.all(20),
                        child: LessonSummaryWidget(
                          lesson: widget.currentLesson,
                          summary: widget.summary,
                        ),
                      ),
                    ],
                  ),
          ),

          // Hi·ªÉn th·ªã n√∫t ho√†n th√†nh b√†i h·ªçc khi kh√¥ng ·ªü ch·∫ø ƒë·ªô to√†n m√†n h√¨nh
          if (!_isFullScreen) _buildCompleteLessonButton(),
        ],
      ),
    );
  }

  // Widget x√¢y d·ª±ng tr√¨nh ph√°t video
  Widget _buildVideoPlayer({bool isFullScreen = false}) {
    if (_videoPlayerController == null ||
        !_isVideoInitialized ||
        _chewieController == null) {
      // Ch·ªâ hi·ªÉn th·ªã hi·ªáu ·ª©ng loading ƒë∆°n gi·∫£n
      return Container(
        width: double.infinity,
        color: Colors.black,
        child: AspectRatio(
          aspectRatio: 16 / 9,
          child: Center(
            child: CircularProgressIndicator(
              color: Colors.orange,
              strokeWidth: 3,
            ),
          ),
        ),
      );
    }

    // S·ª≠ d·ª•ng Chewie ƒë·ªÉ ph√°t video
    return AspectRatio(
      aspectRatio: isFullScreen
          ? MediaQuery.of(context).size.width /
              MediaQuery.of(context).size.height
          : _videoPlayerController!.value.aspectRatio,
      child: Chewie(
        controller: _chewieController!,
      ),
    );
  }

  // Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o v√† ph√°t video
  Future<void> _initializeAndPlayVideo() async {
    if (widget.videoUrl == null || widget.videoUrl!.isEmpty) {
      return;
    }

    if (!_isVideoInitialized) {
      // T·∫£i video m√† kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o
      await _initializeVideoPlayer();
    }

    // Kh√¥ng t·ª± ƒë·ªông ph√°t video sau khi kh·ªüi t·∫°o
    // ƒê√£ b·ªè ƒëo·∫°n code t·ª± ƒë·ªông ph√°t
    setState(() {
      _isPlaying = _videoPlayerController?.value.isPlaying ?? false;
    });
  }

  // ƒê·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y sang MM:SS
  String _formatDuration(Duration duration) {
    final minutes = duration.inMinutes.remainder(60).toString().padLeft(2, '0');
    final seconds = duration.inSeconds.remainder(60).toString().padLeft(2, '0');
    return '$minutes:$seconds';
  }

  // Widget n·ªôi dung b√†i h·ªçc video
  Widget _buildVideoLessonContent(BuildContext context) {
    // L·∫•y ID video v√† ID b√†i h·ªçc t·ª´ currentLesson
    final int videoId = widget.currentLesson.videoId ?? 0;
    final int lessonId = int.parse(widget.currentLesson.id);
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return Container(
      color: isDarkMode ? Colors.black : Colors.white,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Video player
          Container(
            color: Colors.black,
            child: _buildVideoPlayer(),
          ),

          // Th√¥ng tin chi ti·∫øt v·ªÅ video
          if (widget.buildLessonDetailInfo != null)
            Padding(
              padding: const EdgeInsets.all(16),
              child: widget.buildLessonDetailInfo!(widget.currentLesson),
            ),

          // Comment section - S·ª≠ d·ª•ng CommentSectionWidget m·ªõi
          CommentSectionWidget(
            onCommentSubmit: widget.onCommentSubmit,
            videoId: videoId,
            lessonId: lessonId,
          ),
        ],
      ),
    );
  }

  // Widget n·ªôi dung b√†i ki·ªÉm tra
  Widget _buildTestLessonContent(BuildContext context) {
    // Make sure to dispose any video player when showing test content
    if (_videoPlayerController != null) {
      _disposeVideoPlayer();
    }
    
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Banner b√†i ki·ªÉm tra
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [Colors.orange, Colors.deepOrange],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: const Icon(
                      Icons.quiz,
                      color: Colors.white,
                      size: 32,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.currentLesson.title,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'Th·ªùi gian: ${widget.currentLesson.duration} | ${widget.currentLesson.questionCount} c√¢u h·ªèi',
                          style: TextStyle(
                            color: Colors.white.withOpacity(0.9),
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: isDarkMode ? Color(0xFF252525) : Colors.white,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'H∆∞·ªõng d·∫´n l√†m b√†i',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.deepOrange,
                      ),
                    ),
                    const SizedBox(height: 12),
                    _buildTestInstruction(
                      icon: Icons.timer,
                      text:
                          'Th·ªùi gian l√†m b√†i: ${widget.currentLesson.duration}',
                    ),
                    const SizedBox(height: 8),
                    _buildTestInstruction(
                      icon: Icons.question_answer,
                      text:
                          'S·ªë c√¢u h·ªèi: ${widget.currentLesson.questionCount} c√¢u',
                    ),
                    const SizedBox(height: 8),
                    const _buildTestInstruction(
                      icon: Icons.check_circle,
                      text: 'ƒêi·ªÉm ƒë·∫°t: 70% s·ªë c√¢u tr·∫£ l·ªùi ƒë√∫ng',
                    ),
                    const SizedBox(height: 8),
                    const _buildTestInstruction(
                      icon: Icons.refresh,
                      text: 'C√≥ th·ªÉ l√†m l·∫°i n·∫øu kh√¥ng ƒë·∫°t',
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),

        const SizedBox(height: 32),

        // Th√¥ng tin b√†i ki·ªÉm tra
        Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: isDarkMode ? Color(0xFF252525) : Colors.grey[100],
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Th√¥ng tin quan tr·ªçng',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'B√†i ki·ªÉm tra n√†y ƒë√°nh gi√° ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ n·ªôi dung ƒë√£ h·ªçc. B·∫°n c·∫ßn ƒë·∫°t t·ªëi thi·ªÉu 70% s·ªë c√¢u ƒë√∫ng ƒë·ªÉ v∆∞·ª£t qua v√† m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo.',
                style: TextStyle(
                  fontSize: 15,
                  height: 1.5,
                  color: isDarkMode ? Colors.grey[300] : Colors.black87,
                ),
              ),
              const SizedBox(height: 16),
              Text(
                'L∆∞u √Ω:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: isDarkMode ? Colors.white : Colors.black,
                ),
              ),
              const SizedBox(height: 8),
              const Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.blue, size: 18),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'B·∫°n kh√¥ng th·ªÉ chuy·ªÉn sang b√†i h·ªçc ti·∫øp theo n·∫øu ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra n√†y.',
                      style: TextStyle(
                        color: Colors.blue,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              const Row(
                children: [
                  Icon(Icons.warning_amber, color: Colors.orange, size: 18),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ xem k·ªπ t·∫•t c·∫£ b√†i gi·∫£ng tr∆∞·ªõc khi l√†m b√†i ki·ªÉm tra.',
                      style: TextStyle(
                        color: Colors.orange,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),

        const SizedBox(height: 32),

        // N√∫t b·∫Øt ƒë·∫ßu l√†m b√†i
        Center(
          child: ElevatedButton.icon(
            onPressed: widget.completedLessons[widget.currentLesson.id] == true
                ? () => widget.showTestResults()
                : () => widget.startTest(),
            icon: Icon(widget.completedLessons[widget.currentLesson.id] == true
                ? Icons.assessment
                : Icons.play_arrow),
            label: Text(
              widget.completedLessons[widget.currentLesson.id] == true
                  ? 'Xem l·∫°i k·∫øt qu·∫£'
                  : 'B·∫Øt ƒë·∫ßu l√†m b√†i',
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor:
                  widget.completedLessons[widget.currentLesson.id] == true
                      ? Colors.blue
                      : Colors.orange,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.symmetric(
                horizontal: 32,
                vertical: 16,
              ),
              textStyle: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ],
    );
  }

  // Widget ƒë·ªÉ hi·ªÉn th·ªã n√∫t ho√†n th√†nh b√†i h·ªçc
  Widget _buildCompleteLessonButton() {
    // L·∫•y ID b√†i h·ªçc hi·ªán t·∫°i
    final String lessonId = widget.currentLesson.id;

    // Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh
    final bool isCompleted = widget.completedLessons[lessonId] == true;

    final bool hasTest = widget.currentLesson.testType != null;
    final bool canNavigate = widget.canNavigateToNext;

    print('üîç LessonContentWidget: Hi·ªÉn th·ªã CompleteLessonButton');
    print('   - isCompleted: $isCompleted');
    print('   - hasTest: $hasTest');
    print('   - canNavigateToNext: $canNavigate');
    print('   - currentLessonId: $lessonId');
    print('   - completedLessons: ${widget.completedLessons}');

    return CompleteLessonButton(
      isCompleted: isCompleted,
      onComplete: () async {
        print('üì¢ LessonContentWidget: G·ªçi onCompleteLesson t·ª´ UI');

        if (!isCompleted && !hasTest) {
          // G·ªçi API m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo
          try {
            // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ SharedPrefs
            final accountId =
                await SharedPrefs.getUserId().then((id) => id.toString());

            // L·∫•y ID kh√≥a h·ªçc t·ª´ context
            final enrollCourse =
                context.findAncestorWidgetOfExactType<EnrollCourseScreen>();
            if (enrollCourse == null) {
              print('‚ùå Kh√¥ng th·ªÉ l·∫•y courseId t·ª´ EnrollCourseScreen');
              return;
            }

            // G·ªçi API tr·ª±c ti·∫øp b·∫±ng Dio
            final dio = GetIt.instance<Dio>();
            final baseUrl = Constants.BASE_URL;

            print(
                'üîÑ G·ªçi API m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo: accountId=$accountId, courseId=${enrollCourse.courseId}, chapterId=${widget.currentChapter.id}, lessonId=$lessonId');

            await dio.post(
              '$baseUrl/api/progress/unlock-next',
              queryParameters: {
                'accountId': accountId,
                'courseId': enrollCourse.courseId.toString(),
                'chapterId': widget.currentChapter.id,
                'lessonId': lessonId,
              },
            );

            print('‚úÖ ƒê√£ m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo th√†nh c√¥ng');
          } catch (e) {
            print('‚ùå L·ªói khi m·ªü kh√≥a b√†i h·ªçc ti·∫øp theo: $e');
          }
        }

        // ƒê√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc trong UI
        widget.onCompleteLesson();

        // C·∫≠p nh·∫≠t UI
        setState(() {});
      },
      hasTest: hasTest,
      onStartTest: hasTest ? () => widget.startTest() : null,
      onNextLesson: canNavigate ? widget.onNextLesson : null,
      // Kh√¥ng c·∫ßn truy·ªÅn th√¥ng b√°o l·ªói v√¨ kh√¥ng d√πng controller
      errorMessage: null,
    );
  }
}

class _buildTestInstruction extends StatelessWidget {
  final IconData icon;
  final String text;
  final Color? color;

  const _buildTestInstruction({
    Key? key,
    required this.icon,
    required this.text,
    this.color,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    final defaultColor = isDarkMode ? Colors.grey[400] : Colors.grey[700];
    final defaultTextColor = isDarkMode ? Colors.grey[300] : Colors.grey[800];
    
    return Row(
      children: [
        Icon(icon, size: 16, color: color ?? defaultColor),
        const SizedBox(width: 8),
        Text(
          text,
          style: TextStyle(
            fontSize: 14,
            color: color ?? defaultTextColor,
          ),
        ),
      ],
    );
  }
}
